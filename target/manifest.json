{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.6", "generated_at": "2023-07-04T20:13:20.358262Z", "invocation_id": "305764f2-7371-46c3-ac1e-b3d6e09dbfbd", "env": {}, "project_id": "90d23883c8e02320f2934d26faf1a7b1", "user_id": "5c34c6f5-19c5-44c8-a670-e76f34f8dfea", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.desafioaethaina.int_product": {"database": "desafiothaina", "schema": "dev_thaina_intermediate", "name": "int_product", "resource_type": "model", "package_name": "desafioaethaina", "path": "intermediate/int_product.sql", "original_file_path": "models/intermediate/int_product.sql", "unique_id": "model.desafioaethaina.int_product", "fqn": ["desafioaethaina", "intermediate", "int_product"], "alias": "int_product", "checksum": {"name": "sha256", "checksum": "6d668c55f0eefe421068958d9070b726e233320274b025c2802aba8cd427fdcf"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "intermediate"}, "created_at": 1688496927.7453752, "relation_name": null, "raw_code": "with product as (\n    select * \n    from {{ ref('stg_product') }} \n)\n\n, subcategory as (\n    select * \n    from {{ ref('stg_product_subcategory') }}\n)\n\n, category as (\n    select * \n    from {{ ref('stg_product_category') }}\n)\n\n, location as (\n    select * \n    from {{ ref('stg_product_location') }}\n)\n\n, model as (\n    select * \n    from {{ ref('stg_product_model') }}\n)\n\n, union_product_subcategory as (\n    select \n       product.*\n       , category_id\n       , subcategory_name\n    from product\n    left join subcategory\n    on product.product_subcategory_id = subcategory.subcategory_id\n)\n\n, union_product_category as (\n\tselect \n\t\tunion_product_subcategory.*\n\t\t, category_name\n\tfrom union_product_subcategory\n\tleft join category\n    on union_product_subcategory.category_id = category.category_id\n)\n\n, union_product_model as (\n\tselect \n\t\tunion_product_category.*\n\t\t, model_name\n\tfrom union_product_category\n\tleft join model\n    on union_product_category.product_model_id = model.model_id\n)\n\n\nselect * \nfrom union_product_model", "language": "sql", "refs": [["stg_product"], ["stg_product_subcategory"], ["stg_product_category"], ["stg_product_location"], ["stg_product_model"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaethaina.stg_product", "model.desafioaethaina.stg_product_subcategory", "model.desafioaethaina.stg_product_category", "model.desafioaethaina.stg_product_location", "model.desafioaethaina.stg_product_model"]}, "compiled_path": null}, "model.desafioaethaina.int_address": {"database": "desafiothaina", "schema": "dev_thaina_intermediate", "name": "int_address", "resource_type": "model", "package_name": "desafioaethaina", "path": "intermediate/int_address.sql", "original_file_path": "models/intermediate/int_address.sql", "unique_id": "model.desafioaethaina.int_address", "fqn": ["desafioaethaina", "intermediate", "int_address"], "alias": "int_address", "checksum": {"name": "sha256", "checksum": "9e00bb91050c3a096978248681e1e7a5cbe046c7fd4dff87ac03c1f936258700"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "intermediate"}, "created_at": 1688496927.7771034, "relation_name": null, "raw_code": "with address as (\n\tselect * \n    from {{ ref('stg_person_address') }}\n)\n\n, address_type as (\n\tselect * \n    from {{ ref('stg_person_address_type') }}\n)\n\n, business_entity_address as (\n\tselect * \n    from {{ ref('stg_person_business_entity_address') }}\n)\n\n, business_entity_contact as (\n\tselect * \n    from {{ ref('stg_person_business_entity_contact') }}\n)\n\n, contact_type_worker as (\n\tselect  * \n    from  {{ ref('stg_person_contact_type') }} \n)\n\n, person_country as (\n\tselect * \n    from {{ ref('stg_person_country_region') }}\n)\n\n, state_province as (\n\tselect * \n    from {{ ref('stg_person_state_province') }}\n)\n\n, sales_territory as (\n\tselect * \n    from {{ ref('stg_sales_territory') }}\n)\n\n, union_person_addres as (\n    select\n        business_entity_address.address_id\n        , business_entity_id\n        , business_entity_address.address_type_id\n        , concat(address_line1, ' ', ifnull('',address_line2), ' ', postal_code) as address\n        , city\n        , state_province_id\n        , address_type_name\n    from business_entity_address\n    left join address\n    on address.address_id = business_entity_address.address_id\n   \tleft join address_type\n   \ton address_type.address_type_id = business_entity_address.address_type_id\n)\n\n, union_contact_type as (\n\tselect \n\t\tunion_person_addres.*\n\t\t, person_id as worker_id\n\t\t, contact_type_worker.contact_type_id \n\t\t, contact_type_name as contact_type_name_worker\n\tfrom union_person_addres\n\tleft join business_entity_contact\n\ton business_entity_contact.business_entity_id = union_person_addres.business_entity_id \n\tleft join contact_type_worker\n\ton contact_type_worker.contact_type_id = business_entity_contact.contact_type_id\n)\n\n, union_territory as (\n\tselect \n\t\tunion_contact_type.*\n\t\t, state_province_code\n\t\t, state_province.country_region_code\n\t\t, name_province_description\n\t\t, state_province_name\n\t\t, sales_territory.territory_id\n\t\t, name_territory_description\n\tfrom union_contact_type\n\tleft join state_province\n\t\ton state_province.state_province_id = union_contact_type.state_province_id\n\tleft join sales_territory\n\t\ton sales_territory.territory_id = state_province.territory_id\n)\n\nselect * \nfrom union_territory", "language": "sql", "refs": [["stg_person_address"], ["stg_person_address_type"], ["stg_person_business_entity_address"], ["stg_person_business_entity_contact"], ["stg_person_contact_type"], ["stg_person_country_region"], ["stg_person_state_province"], ["stg_sales_territory"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaethaina.stg_person_address", "model.desafioaethaina.stg_person_address_type", "model.desafioaethaina.stg_person_business_entity_address", "model.desafioaethaina.stg_person_business_entity_contact", "model.desafioaethaina.stg_person_contact_type", "model.desafioaethaina.stg_person_country_region", "model.desafioaethaina.stg_person_state_province", "model.desafioaethaina.stg_sales_territory"]}, "compiled_path": null}, "model.desafioaethaina.int_person": {"database": "desafiothaina", "schema": "dev_thaina_intermediate", "name": "int_person", "resource_type": "model", "package_name": "desafioaethaina", "path": "intermediate/int_person.sql", "original_file_path": "models/intermediate/int_person.sql", "unique_id": "model.desafioaethaina.int_person", "fqn": ["desafioaethaina", "intermediate", "int_person"], "alias": "int_person", "checksum": {"name": "sha256", "checksum": "17510d6ab4fd024ad297e82baecd3724996793fc2b2d1fac72cbd958379ae992"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "intermediate"}, "created_at": 1688496927.7895806, "relation_name": null, "raw_code": "with customer as (\n\tselect * \n    from {{ ref('stg_sales_customer') }}\n)\n\n, person as (\n\tselect * \n    from {{ ref('stg_person_person') }}\n)\n\n, union_customer_person as (\n\tselect\n\t\tcustomer.*\n\t\t, person.*\n\tfrom person\n\tleft join customer\n\ton person.business_entity_id = customer.person_id \n)\n\n, transformed as (\n\tselect\n\t\tbusiness_entity_id\n\t\t, customer_id\n\t\t, case\n\t\t\twhen person_type = 'SC' \n\t\t\t\tthen 'Store Contact'\n\t\t\twhen person_type = 'IN' \n\t\t\t\tthen 'Individual Customer'\n\t\t\twhen person_type = 'SP' \n\t\t\t\tthen 'Sales person'\n\t\t\twhen person_type = 'EM' \n\t\t\t\tthen 'Employee'  \n\t\t\twhen person_type = 'VC' \n\t\t\t\tthen 'Vendor'\n\t\t\twhen person_type = 'GC'\n\t\t\t\tthen 'General contact'\n\t\t\telse null\n\t\tend as person_type\n\t\t, name_style\n\t\t, courtesy_title\n\t\t, case \n\t\t\twhen middle_name is not null\n\t\t\t\tthen concat(first_name, ' ', middle_name, ' ',last_name)\n\t\t\telse concat(first_name, ' ',last_name)\n\t\tend as full_name\n\t\t, suffix\n\t\t, email_promotion\n\t\t, person_id\n\t\t, store_id\n\t\t, territory_id \n\tfrom union_customer_person\n)\n\nselect * \nfrom transformed", "language": "sql", "refs": [["stg_sales_customer"], ["stg_person_person"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaethaina.stg_sales_customer", "model.desafioaethaina.stg_person_person"]}, "compiled_path": null}, "model.desafioaethaina.stg_product_location": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_product_location", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/products/stg_product_location.sql", "original_file_path": "models/silver/products/stg_product_location.sql", "unique_id": "model.desafioaethaina.stg_product_location", "fqn": ["desafioaethaina", "silver", "products", "stg_product_location"], "alias": "stg_product_location", "checksum": {"name": "sha256", "checksum": "5c33f79f337ccad1e28da472b58fa73d92c782ac2246d4a1817c030a1049848c"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496927.987368, "relation_name": null, "raw_code": "with source_data as (\n  select \n    locationid as location_id\n    , name as location_name\n    -- Standard hourly cost of the manufacturing location.\n    , costrate as cost_rate\n    -- Work capacity (in hours) of the manufacturing location.\n    , availability \n  from  {{source('source_dw','location')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "location"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.location"]}, "compiled_path": null}, "model.desafioaethaina.stg_product_subcategory": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_product_subcategory", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/products/stg_product_subcategory.sql", "original_file_path": "models/silver/products/stg_product_subcategory.sql", "unique_id": "model.desafioaethaina.stg_product_subcategory", "fqn": ["desafioaethaina", "silver", "products", "stg_product_subcategory"], "alias": "stg_product_subcategory", "checksum": {"name": "sha256", "checksum": "39d9ff3ef465f333554a5d7b734d59acafe72d25e9bd9e109b927955e571b709"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0013359, "relation_name": null, "raw_code": "with source_data as (\n  select \n    productsubcategoryid as subcategory_id\n    , productcategoryid as category_id\n    , name as subcategory_name\n    , rowguid\n  from  {{source('source_dw','productsubcategory')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "productsubcategory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.productsubcategory"]}, "compiled_path": null}, "model.desafioaethaina.stg_product_category": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_product_category", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/products/stg_product_category.sql", "original_file_path": "models/silver/products/stg_product_category.sql", "unique_id": "model.desafioaethaina.stg_product_category", "fqn": ["desafioaethaina", "silver", "products", "stg_product_category"], "alias": "stg_product_category", "checksum": {"name": "sha256", "checksum": "4b87198379dcef1bbdaa43c43d005967c3e8059d81ddf29925b15afa99e38932"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0111644, "relation_name": null, "raw_code": "with source_data as (\n  select \n    productcategoryid as category_id\n    , name as category_name\n    , rowguid\n  from  {{source('source_dw','productcategory')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "productcategory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.productcategory"]}, "compiled_path": null}, "model.desafioaethaina.stg_product": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_product", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/products/stg_product.sql", "original_file_path": "models/silver/products/stg_product.sql", "unique_id": "model.desafioaethaina.stg_product", "fqn": ["desafioaethaina", "silver", "products", "stg_product"], "alias": "stg_product", "checksum": {"name": "sha256", "checksum": "303104413d9a52260ef62a68db9f95c55c0d4ee19b14f3efc4b586110c7dd27e"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.020526, "relation_name": null, "raw_code": "with source_data as (\n  select \n    productid as product_id\n    , productmodelid as product_model_id\n    , productsubcategoryid as product_subcategory_id\n    , name as product_name\n    , productnumber as product_number\n    , makeflag\n    , finishedgoodsflag as finished_goods_flag\n    , color\n    , safetystocklevel as safety_stock_level\n    , standardcost as stand_cost\n    , listprice as list_price\n    , size as size_product\n    , style as style_product\n    , weight as weight_product \n    , rowguid\n  from  {{ source('source_dw','product') }}\n)\n\nselect * from source_data", "language": "sql", "refs": [], "sources": [["source_dw", "product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.product"]}, "compiled_path": null}, "model.desafioaethaina.stg_product_model": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_product_model", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/products/stg_product_model.sql", "original_file_path": "models/silver/products/stg_product_model.sql", "unique_id": "model.desafioaethaina.stg_product_model", "fqn": ["desafioaethaina", "silver", "products", "stg_product_model"], "alias": "stg_product_model", "checksum": {"name": "sha256", "checksum": "0bef22fbe1733bc9e42d328415e61ea36d274786aad94ea59d97a5c286be27df"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0313315, "relation_name": null, "raw_code": "with source_data as (\n  select \n    productmodelid as model_id\n    , name as model_name\n    , rowguid\n  from  {{source('source_dw','productmodel')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "productmodel"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.productmodel"]}, "compiled_path": null}, "model.desafioaethaina.stg_purchasing_ship_method": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_purchasing_ship_method", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/purchasing/stg_purchasing_ship_method.sql", "original_file_path": "models/silver/purchasing/stg_purchasing_ship_method.sql", "unique_id": "model.desafioaethaina.stg_purchasing_ship_method", "fqn": ["desafioaethaina", "silver", "purchasing", "stg_purchasing_ship_method"], "alias": "stg_purchasing_ship_method", "checksum": {"name": "sha256", "checksum": "a04ccc9c3e09e9ca3d4f3c1f697ef94edd7543cc738b49611ec059a0f13a127f"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0428023, "relation_name": null, "raw_code": "with source_data as (\n  select \n    shipmethodid as ship_method_id\n    , name as shipping_company_name\n    , shipbase as ship_base\n    , shiprate as ship_rate\n    , rowguid\n  from  {{source('source_dw','shipmethod')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "shipmethod"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.shipmethod"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_order_detail": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_order_detail", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_order_detail.sql", "original_file_path": "models/silver/sales/stg_sales_order_detail.sql", "unique_id": "model.desafioaethaina.stg_sales_order_detail", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_order_detail"], "alias": "stg_sales_order_detail", "checksum": {"name": "sha256", "checksum": "eed35e6c45bbd136f4fdff08219737b646b340c391826814e69fa8468823a747"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0551429, "relation_name": null, "raw_code": "with source_data as (\n  select \n    salesorderid as sales_order_id\n    , salesorderdetailid as sales_order_detail_id\n    -- Shipment tracking number supplied by the shipper.\n    , carriertrackingnumber as carrier_tracking_number\n    , orderqty as order_qty\n    , productid as product_id\n    -- Promotional code. Foreign key to SpecialOffer.SpecialOfferID.\n    -- , specialofferid as special_offer_id\n    , unitprice as unit_price\n    , unitpricediscount as unit_price_discount\n    /* Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.\n      Computed: isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))* era o linetotal*/ \n    , rowguid\n  from  {{source('source_dw','salesorderdetail')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesorderdetail"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_territory": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_territory", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_territory.sql", "original_file_path": "models/silver/sales/stg_sales_territory.sql", "unique_id": "model.desafioaethaina.stg_sales_territory", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_territory"], "alias": "stg_sales_territory", "checksum": {"name": "sha256", "checksum": "8cbe642e835df69402dc750ce391640f260561b4e9a0713bf492809bc6641200"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0665977, "relation_name": null, "raw_code": "with source_data as (\n    select\n        territoryid as territory_id\n        , name as name_territory_description\n        , countryregioncode as country_region_code\n        , 'group' as group_geo\n        , salesytd as sales_territory_year\n        , saleslastyear as sales_last_year\n        , costytd as bussiness_cost_in_territory\n        , costlastyear as bussiness_cost_in_territory_last_year\n        , rowguid  rowguid_sales_territory\n    from {{ source('source_dw', 'salesterritory') }}\n  )\n\nselect  *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesterritory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesterritory"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_reason": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_reason", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_reason.sql", "original_file_path": "models/silver/sales/stg_sales_reason.sql", "unique_id": "model.desafioaethaina.stg_sales_reason", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_reason"], "alias": "stg_sales_reason", "checksum": {"name": "sha256", "checksum": "401c668ba0011468d92ec8805b550d36c9a2abd3803f5e962d8ce9ffc5fe1ac5"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0803847, "relation_name": null, "raw_code": "with\n  source_data as (\n    select\n      salesreasonid as sales_reason_id\n      , name as name_reason\n      , reasontype as reason_type\n    from {{ source('source_dw', 'salesreason') }}\n  )\n\nselect  *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesreason"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesreason"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_customer": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_customer", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_customer.sql", "original_file_path": "models/silver/sales/stg_sales_customer.sql", "unique_id": "model.desafioaethaina.stg_sales_customer", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_customer"], "alias": "stg_sales_customer", "checksum": {"name": "sha256", "checksum": "a65625f129f4f310ed6d632c057b2e2fbdc5af97a2f6e9de18d547e446d977d2"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.0927253, "relation_name": null, "raw_code": "with source_data as (\n  select \n    customerid as customer_id\n    , personid as person_id\n    , storeid as store_id\n    , territoryid as territory_id\n    , rowguid\n  from  {{source('source_dw','customer')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.customer"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_person": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_person", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_person.sql", "original_file_path": "models/silver/sales/stg_sales_person.sql", "unique_id": "model.desafioaethaina.stg_sales_person", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_person"], "alias": "stg_sales_person", "checksum": {"name": "sha256", "checksum": "14a0f037e05985341c28eac673da973aefdede9b2e10d61d9f37b402a908d178"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1051645, "relation_name": null, "raw_code": "with\n  source_data as (\n    select\n      businessentityid as business_entity_id\n      , territoryid as territory_id\n      , salesquota as sales_quota\n      , bonus\n      , commissionpct as commission_pct\n      , salesytd as sales_total\n      , saleslastyear as sales_last_year\n      , rowguid\n    from {{ source('source_dw', 'salesperson') }}\n  )\n\nselect  *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesperson"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesperson"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_order_header_reason": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_order_header_reason", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_order_header_reason.sql", "original_file_path": "models/silver/sales/stg_sales_order_header_reason.sql", "unique_id": "model.desafioaethaina.stg_sales_order_header_reason", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_order_header_reason"], "alias": "stg_sales_order_header_reason", "checksum": {"name": "sha256", "checksum": "e39c4686b69784181a264dabade4263d841c6d1769cc5460d1fb8a8b03f0f602"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1151996, "relation_name": null, "raw_code": "with source_data as (\n  select\n    salesorderid as sales_order_id\n    , salesreasonid as sales_reason_id\n  from\n    {{ source('source_dw', 'salesorderheadersalesreason') }}\n)\nselect  *\nfrom  source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderheadersalesreason"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesorderheadersalesreason"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_creditcard": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_creditcard", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_creditcard.sql", "original_file_path": "models/silver/sales/stg_sales_creditcard.sql", "unique_id": "model.desafioaethaina.stg_sales_creditcard", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_creditcard"], "alias": "stg_sales_creditcard", "checksum": {"name": "sha256", "checksum": "dd29cb84656ce9fbb4da098e97e5f45c6fb23e6cebfd8753c1e4003886a4e9b1"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1263413, "relation_name": null, "raw_code": "with source_data as (\n  select \n    creditcardid as credit_card_id\n    , cardtype as card_type\n  from  {{source('source_dw','creditcard')}}\n)\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "creditcard"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.creditcard"]}, "compiled_path": null}, "model.desafioaethaina.stg_sales_order_header": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_sales_order_header", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/sales/stg_sales_order_header.sql", "original_file_path": "models/silver/sales/stg_sales_order_header.sql", "unique_id": "model.desafioaethaina.stg_sales_order_header", "fqn": ["desafioaethaina", "silver", "sales", "stg_sales_order_header"], "alias": "stg_sales_order_header", "checksum": {"name": "sha256", "checksum": "371c7f128b7ed53c74e7cca3a0345483e5df2148c117bfc11e941aadc31459d0"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.135545, "relation_name": null, "raw_code": "with source_data as (\n  select\n    salesorderid as sales_order_id\n    , customerid as customer_id\n    , cast(cast(orderdate as timestamp) as date) as order_date\n    , cast(cast(duedate as timestamp) as date) as due_date\n    , cast(cast(shipdate as timestamp) as date) as ship_date\n    , status\n    , onlineorderflag as online_order_flag\n    , purchaseordernumber as purchase_order_number\n    , accountnumber as account_number\n    , salespersonid as sales_person_id\n    , territoryid as territory_id\n    , billtoaddressid as bill_to_address_id\n    , shiptoaddressid as ship_to_address_id\n    , shipmethodid as ship_method_id\n    , creditcardid as credit_card_id\n    , creditcardapprovalcode as credit_card_approval_code \n    , currencyrateid as currency_rate_id\n    , subtotal as sub_total\n    , taxamt as tax_amount\n    , freight\n    /*Total due from customer. Computed as Subtotal + TaxAmt + Freight.\n      Computed: isnull(([SubTotal]+[TaxAmt])+[Freight],(0)) */\n    , totaldue as total_due\n    , rowguid\n  from\n    {{ source('source_dw', 'salesorderheader') }}\n)\n\nselect * \n  from source_data", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderheader"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.salesorderheader"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_address_type": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_address_type", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_address_type.sql", "original_file_path": "models/silver/person/stg_person_address_type.sql", "unique_id": "model.desafioaethaina.stg_person_address_type", "fqn": ["desafioaethaina", "silver", "person", "stg_person_address_type"], "alias": "stg_person_address_type", "checksum": {"name": "sha256", "checksum": "9ab1518d778876e6dd258090494a31fee81701c7c4cea5a84717531abad41031"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1453593, "relation_name": null, "raw_code": "with source_data as (\n  select \n    addresstypeid as address_type_id\n    , name as address_type_name \n    , rowguid\n  from  {{source('source_dw','addresstype')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "addresstype"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.addresstype"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_state_province": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_state_province", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_state_province.sql", "original_file_path": "models/silver/person/stg_person_state_province.sql", "unique_id": "model.desafioaethaina.stg_person_state_province", "fqn": ["desafioaethaina", "silver", "person", "stg_person_state_province"], "alias": "stg_person_state_province", "checksum": {"name": "sha256", "checksum": "a53a2857c69b3a9b5d50b399e6b2527f0f50866daa46f98a020f66a89f1a0731"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.152134, "relation_name": null, "raw_code": "with source_data as (\n  select \n    stateprovinceid as state_province_id\n    , stateprovincecode as state_province_code\n    , countryregioncode as country_region_code\n    , name as name_province_description\n    , isonlystateprovinceflag as only_state_province_flag\n    , name as state_province_name\n    , territoryid as territory_id\n    , rowguid as rowguide_province\n  from  {{source('source_dw','stateprovince')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_person": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_person", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_person.sql", "original_file_path": "models/silver/person/stg_person_person.sql", "unique_id": "model.desafioaethaina.stg_person_person", "fqn": ["desafioaethaina", "silver", "person", "stg_person_person"], "alias": "stg_person_person", "checksum": {"name": "sha256", "checksum": "83e8da18af0a89b641593a607e246a5f3eae46ce98f47ed7cbbfeeadff99e9ff"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1582818, "relation_name": null, "raw_code": "with source_data as (\n  select \n    businessentityid as business_entity_id\n    , persontype as person_type\n    , namestyle as name_style\n    , title as courtesy_title\n    , firstname as first_name\n    , middlename as middle_name\n    , lastname as last_name\n    , suffix\n    , emailpromotion as email_promotion \n    , rowguid as rowguide_person\n  from  {{source('source_dw','person')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "person"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.person"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_address": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_address", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_address.sql", "original_file_path": "models/silver/person/stg_person_address.sql", "unique_id": "model.desafioaethaina.stg_person_address", "fqn": ["desafioaethaina", "silver", "person", "stg_person_address"], "alias": "stg_person_address", "checksum": {"name": "sha256", "checksum": "0b9d7636305c9a553c46d9b8e417f8742c8a0a759814b5b94f2752a51da2b3c9"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1634932, "relation_name": null, "raw_code": "with source_data as (\n  select \n    addressid as address_id\n    , addressline1 as address_line1\n    , addressline2 as address_line2\n    , city\n    , stateprovinceid as state_province_id\n    , postalcode as postal_code\n    , rowguid\n  from  {{source('source_dw','address')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "address"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.address"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_contact_type": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_contact_type", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_contact_type.sql", "original_file_path": "models/silver/person/stg_person_contact_type.sql", "unique_id": "model.desafioaethaina.stg_person_contact_type", "fqn": ["desafioaethaina", "silver", "person", "stg_person_contact_type"], "alias": "stg_person_contact_type", "checksum": {"name": "sha256", "checksum": "28bdc9a1f6602c43f732cf848476a9e468e47ed5e325b0f578890c5f6b426cac"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1714368, "relation_name": null, "raw_code": "with source_data as (\n  select \n    contacttypeid as contact_type_id\n    , name as contact_type_name \n  from  {{source('source_dw','contacttype')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "contacttype"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.contacttype"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_business_entity_address": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_business_entity_address", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_business_entity_address.sql", "original_file_path": "models/silver/person/stg_person_business_entity_address.sql", "unique_id": "model.desafioaethaina.stg_person_business_entity_address", "fqn": ["desafioaethaina", "silver", "person", "stg_person_business_entity_address"], "alias": "stg_person_business_entity_address", "checksum": {"name": "sha256", "checksum": "d93ad56b12012e23c782ce5989685a32dae9eedb5ac7e5cb343a87f34ead404c"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1797915, "relation_name": null, "raw_code": "with source_data as (\n  select \n    businessentityid as business_entity_id\n    , addressid as address_id\n    , addresstypeid as address_type_id\n    , rowguid\n  from  {{source('source_dw','businessentityaddress')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "businessentityaddress"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.businessentityaddress"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_country_region": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_country_region", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_country_region.sql", "original_file_path": "models/silver/person/stg_person_country_region.sql", "unique_id": "model.desafioaethaina.stg_person_country_region", "fqn": ["desafioaethaina", "silver", "person", "stg_person_country_region"], "alias": "stg_person_country_region", "checksum": {"name": "sha256", "checksum": "e4207013a9d72875db284abc9817c06240c372216fec7f2049b487118572ee91"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.18783, "relation_name": null, "raw_code": "with source_data as (\n  select \n    countryregioncode as country_region_code\n    , name as country_region_name \n  from  {{source('source_dw','countryregion')}}\n)\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "countryregion"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.countryregion"]}, "compiled_path": null}, "model.desafioaethaina.stg_person_business_entity_contact": {"database": "desafiothaina", "schema": "dev_thaina_silver", "name": "stg_person_business_entity_contact", "resource_type": "model", "package_name": "desafioaethaina", "path": "silver/person/stg_person_business_entity_contact.sql", "original_file_path": "models/silver/person/stg_person_business_entity_contact.sql", "unique_id": "model.desafioaethaina.stg_person_business_entity_contact", "fqn": ["desafioaethaina", "silver", "person", "stg_person_business_entity_contact"], "alias": "stg_person_business_entity_contact", "checksum": {"name": "sha256", "checksum": "030da003cb758aa66ece0ca764ad69464efb1d9335bf5958a87e0d29b1ff14f3"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "silver"}, "created_at": 1688496928.1990643, "relation_name": null, "raw_code": "with source_data as (\n  select \n    businessentityid as business_entity_id\n    , personid as person_id\n    , contacttypeid as contact_type_id\n    , rowguid\n  from  {{source('source_dw','businessentitycontact')}}\n)\n\nselect *\nfrom source_data", "language": "sql", "refs": [], "sources": [["source_dw", "businessentitycontact"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaethaina.source_dw.businessentitycontact"]}, "compiled_path": null}, "seed.desafioaethaina.productmodelproductdescriptionculture": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productmodelproductdescriptionculture", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productmodelproductdescriptionculture.csv", "original_file_path": "seeds/productmodelproductdescriptionculture.csv", "unique_id": "seed.desafioaethaina.productmodelproductdescriptionculture", "fqn": ["desafioaethaina", "productmodelproductdescriptionculture"], "alias": "productmodelproductdescriptionculture", "checksum": {"name": "sha256", "checksum": "308eb39c78d5ac01abaebc3c8a9010b9f97f6a0287e626f59ad5c47280c1eb9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2366216, "relation_name": "`desafiothaina`.`dev_thaina`.`productmodelproductdescriptionculture`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.location": {"database": "desafiothaina", "schema": "dev_thaina", "name": "location", "resource_type": "seed", "package_name": "desafioaethaina", "path": "location.csv", "original_file_path": "seeds/location.csv", "unique_id": "seed.desafioaethaina.location", "fqn": ["desafioaethaina", "location"], "alias": "location", "checksum": {"name": "sha256", "checksum": "29ba4359bc99ae0ef91e980529da9a6c27f668dfb2158bafad7069c807f91791"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"availability": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://seeds/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"availability": "numeric"}}, "created_at": 1688496928.7512038, "relation_name": "`desafiothaina`.`dev_thaina`.`location`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.shift": {"database": "desafiothaina", "schema": "dev_thaina", "name": "shift", "resource_type": "seed", "package_name": "desafioaethaina", "path": "shift.csv", "original_file_path": "seeds/shift.csv", "unique_id": "seed.desafioaethaina.shift", "fqn": ["desafioaethaina", "shift"], "alias": "shift", "checksum": {"name": "sha256", "checksum": "ee1e16ae4d537d7e31908836ec565bcc6332fb690bc19db90f3b894ce0c47f21"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2556767, "relation_name": "`desafiothaina`.`dev_thaina`.`shift`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productdocument": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productdocument", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productdocument.csv", "original_file_path": "seeds/productdocument.csv", "unique_id": "seed.desafioaethaina.productdocument", "fqn": ["desafioaethaina", "productdocument"], "alias": "productdocument", "checksum": {"name": "sha256", "checksum": "6449b4ba7716494c03a8403931156254d2dc81a28c5bb55528dd8c6d07191407"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2641406, "relation_name": "`desafiothaina`.`dev_thaina`.`productdocument`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.phonenumbertype": {"database": "desafiothaina", "schema": "dev_thaina", "name": "phonenumbertype", "resource_type": "seed", "package_name": "desafioaethaina", "path": "phonenumbertype.csv", "original_file_path": "seeds/phonenumbertype.csv", "unique_id": "seed.desafioaethaina.phonenumbertype", "fqn": ["desafioaethaina", "phonenumbertype"], "alias": "phonenumbertype", "checksum": {"name": "sha256", "checksum": "d8b2eed32d4ce37841245069eb82334b5d05622b9535b6f23465e7bcdd43b747"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2686687, "relation_name": "`desafiothaina`.`dev_thaina`.`phonenumbertype`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.shipmethod": {"database": "desafiothaina", "schema": "dev_thaina", "name": "shipmethod", "resource_type": "seed", "package_name": "desafioaethaina", "path": "shipmethod.csv", "original_file_path": "seeds/shipmethod.csv", "unique_id": "seed.desafioaethaina.shipmethod", "fqn": ["desafioaethaina", "shipmethod"], "alias": "shipmethod", "checksum": {"name": "sha256", "checksum": "c3201fe627935f7cce44d799cb784a8bb4cd126ebef254a18f6f1166af39be08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2733858, "relation_name": "`desafiothaina`.`dev_thaina`.`shipmethod`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.transactionhistoryarchive": {"database": "desafiothaina", "schema": "dev_thaina", "name": "transactionhistoryarchive", "resource_type": "seed", "package_name": "desafioaethaina", "path": "transactionhistoryarchive.csv", "original_file_path": "seeds/transactionhistoryarchive.csv", "unique_id": "seed.desafioaethaina.transactionhistoryarchive", "fqn": ["desafioaethaina", "transactionhistoryarchive"], "alias": "transactionhistoryarchive", "checksum": {"name": "path", "checksum": "seeds/transactionhistoryarchive.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2779152, "relation_name": "`desafiothaina`.`dev_thaina`.`transactionhistoryarchive`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.culture": {"database": "desafiothaina", "schema": "dev_thaina", "name": "culture", "resource_type": "seed", "package_name": "desafioaethaina", "path": "culture.csv", "original_file_path": "seeds/culture.csv", "unique_id": "seed.desafioaethaina.culture", "fqn": ["desafioaethaina", "culture"], "alias": "culture", "checksum": {"name": "sha256", "checksum": "2742ee3271a1d83e0b90e9ec55b8714b30b92a28e2b8546bbf26051a7269d45b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2825198, "relation_name": "`desafiothaina`.`dev_thaina`.`culture`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.specialoffer": {"database": "desafiothaina", "schema": "dev_thaina", "name": "specialoffer", "resource_type": "seed", "package_name": "desafioaethaina", "path": "specialoffer.csv", "original_file_path": "seeds/specialoffer.csv", "unique_id": "seed.desafioaethaina.specialoffer", "fqn": ["desafioaethaina", "specialoffer"], "alias": "specialoffer", "checksum": {"name": "sha256", "checksum": "1f30e1998397730aad8c5bfb34f2b2ebf3fdb436bac25aa041c5c4948e606406"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2868843, "relation_name": "`desafiothaina`.`dev_thaina`.`specialoffer`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productproductphoto": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productproductphoto", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productproductphoto.csv", "original_file_path": "seeds/productproductphoto.csv", "unique_id": "seed.desafioaethaina.productproductphoto", "fqn": ["desafioaethaina", "productproductphoto"], "alias": "productproductphoto", "checksum": {"name": "sha256", "checksum": "786c1598ffc4883bb071ebcafa982e2e93facaa75b9e76091db9f6ac897c36c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.2932851, "relation_name": "`desafiothaina`.`dev_thaina`.`productproductphoto`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.employeedepartmenthistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "employeedepartmenthistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "employeedepartmenthistory.csv", "original_file_path": "seeds/employeedepartmenthistory.csv", "unique_id": "seed.desafioaethaina.employeedepartmenthistory", "fqn": ["desafioaethaina", "employeedepartmenthistory"], "alias": "employeedepartmenthistory", "checksum": {"name": "sha256", "checksum": "49e72d10ace89b44b276e9d4ea24fa18407db7f14a8a08cf2dfe06c5886d27d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.29832, "relation_name": "`desafiothaina`.`dev_thaina`.`employeedepartmenthistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesorderdetail": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderdetail", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesorderdetail.csv", "original_file_path": "seeds/salesorderdetail.csv", "unique_id": "seed.desafioaethaina.salesorderdetail", "fqn": ["desafioaethaina", "salesorderdetail"], "alias": "salesorderdetail", "checksum": {"name": "path", "checksum": "seeds/salesorderdetail.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.304329, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderdetail`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.purchaseorderdetail": {"database": "desafiothaina", "schema": "dev_thaina", "name": "purchaseorderdetail", "resource_type": "seed", "package_name": "desafioaethaina", "path": "purchaseorderdetail.csv", "original_file_path": "seeds/purchaseorderdetail.csv", "unique_id": "seed.desafioaethaina.purchaseorderdetail", "fqn": ["desafioaethaina", "purchaseorderdetail"], "alias": "purchaseorderdetail", "checksum": {"name": "sha256", "checksum": "99d16637a589e1198e2138433a233c3b45e1d00928c650cf452d731d2e982698"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"rejectedqty": "numeric", "receivedqty": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://seeds/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"rejectedqty": "numeric", "receivedqty": "numeric"}}, "created_at": 1688496928.757919, "relation_name": "`desafiothaina`.`dev_thaina`.`purchaseorderdetail`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.person": {"database": "desafiothaina", "schema": "dev_thaina", "name": "person", "resource_type": "seed", "package_name": "desafioaethaina", "path": "person.csv", "original_file_path": "seeds/person.csv", "unique_id": "seed.desafioaethaina.person", "fqn": ["desafioaethaina", "person"], "alias": "person", "checksum": {"name": "path", "checksum": "seeds/person.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3210332, "relation_name": "`desafiothaina`.`dev_thaina`.`person`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.businessentitycontact": {"database": "desafiothaina", "schema": "dev_thaina", "name": "businessentitycontact", "resource_type": "seed", "package_name": "desafioaethaina", "path": "businessentitycontact.csv", "original_file_path": "seeds/businessentitycontact.csv", "unique_id": "seed.desafioaethaina.businessentitycontact", "fqn": ["desafioaethaina", "businessentitycontact"], "alias": "businessentitycontact", "checksum": {"name": "sha256", "checksum": "a2776812e3edca32a183aad3d4740860a6433718c26885472874e859a692d3a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3300703, "relation_name": "`desafiothaina`.`dev_thaina`.`businessentitycontact`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.billofmaterials": {"database": "desafiothaina", "schema": "dev_thaina", "name": "billofmaterials", "resource_type": "seed", "package_name": "desafioaethaina", "path": "billofmaterials.csv", "original_file_path": "seeds/billofmaterials.csv", "unique_id": "seed.desafioaethaina.billofmaterials", "fqn": ["desafioaethaina", "billofmaterials"], "alias": "billofmaterials", "checksum": {"name": "sha256", "checksum": "ae09a8f23072387e63c96cf03dfef901b4bb1798122eb710338898c275f4f3f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"perassemblyqty": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://seeds/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"perassemblyqty": "numeric"}}, "created_at": 1688496928.7452033, "relation_name": "`desafiothaina`.`dev_thaina`.`billofmaterials`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.workorder": {"database": "desafiothaina", "schema": "dev_thaina", "name": "workorder", "resource_type": "seed", "package_name": "desafioaethaina", "path": "workorder.csv", "original_file_path": "seeds/workorder.csv", "unique_id": "seed.desafioaethaina.workorder", "fqn": ["desafioaethaina", "workorder"], "alias": "workorder", "checksum": {"name": "path", "checksum": "seeds/workorder.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3461933, "relation_name": "`desafiothaina`.`dev_thaina`.`workorder`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.purchaseorderheader": {"database": "desafiothaina", "schema": "dev_thaina", "name": "purchaseorderheader", "resource_type": "seed", "package_name": "desafioaethaina", "path": "purchaseorderheader.csv", "original_file_path": "seeds/purchaseorderheader.csv", "unique_id": "seed.desafioaethaina.purchaseorderheader", "fqn": ["desafioaethaina", "purchaseorderheader"], "alias": "purchaseorderheader", "checksum": {"name": "sha256", "checksum": "b58dfa5c3298d730fbeaafb3348ce2f7e692172a2a359d7eabfe16f6fd65c3b3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3558683, "relation_name": "`desafiothaina`.`dev_thaina`.`purchaseorderheader`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productcategory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productcategory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productcategory.csv", "original_file_path": "seeds/productcategory.csv", "unique_id": "seed.desafioaethaina.productcategory", "fqn": ["desafioaethaina", "productcategory"], "alias": "productcategory", "checksum": {"name": "sha256", "checksum": "715993a9c2486aaac87ef1b847975746a5533a88c33017ec43261e1e500a4f5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3641024, "relation_name": "`desafiothaina`.`dev_thaina`.`productcategory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesterritory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesterritory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesterritory.csv", "original_file_path": "seeds/salesterritory.csv", "unique_id": "seed.desafioaethaina.salesterritory", "fqn": ["desafioaethaina", "salesterritory"], "alias": "salesterritory", "checksum": {"name": "sha256", "checksum": "9bc25afab05b39670952a60d3bace9687e83a8fd0e19b623c1c84fe6d98e58cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3730838, "relation_name": "`desafiothaina`.`dev_thaina`.`salesterritory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.illustration": {"database": "desafiothaina", "schema": "dev_thaina", "name": "illustration", "resource_type": "seed", "package_name": "desafioaethaina", "path": "illustration.csv", "original_file_path": "seeds/illustration.csv", "unique_id": "seed.desafioaethaina.illustration", "fqn": ["desafioaethaina", "illustration"], "alias": "illustration", "checksum": {"name": "sha256", "checksum": "3f43b9c8cc078c51d13e3e8d369e82bae04ba7a069bd13da8b7fbf386176c9e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.381147, "relation_name": "`desafiothaina`.`dev_thaina`.`illustration`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.product": {"database": "desafiothaina", "schema": "dev_thaina", "name": "product", "resource_type": "seed", "package_name": "desafioaethaina", "path": "product.csv", "original_file_path": "seeds/product.csv", "unique_id": "seed.desafioaethaina.product", "fqn": ["desafioaethaina", "product"], "alias": "product", "checksum": {"name": "sha256", "checksum": "a926851b124bc604848048a8728641698563743c26a16913ae121605b41234c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.3922288, "relation_name": "`desafiothaina`.`dev_thaina`.`product`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productvendor": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productvendor", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productvendor.csv", "original_file_path": "seeds/productvendor.csv", "unique_id": "seed.desafioaethaina.productvendor", "fqn": ["desafioaethaina", "productvendor"], "alias": "productvendor", "checksum": {"name": "sha256", "checksum": "84629d9e5250bbe1341ad920f555c4c1774e9bd557e78b6770432cb131938d5e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4025037, "relation_name": "`desafiothaina`.`dev_thaina`.`productvendor`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.businessentity": {"database": "desafiothaina", "schema": "dev_thaina", "name": "businessentity", "resource_type": "seed", "package_name": "desafioaethaina", "path": "businessentity.csv", "original_file_path": "seeds/businessentity.csv", "unique_id": "seed.desafioaethaina.businessentity", "fqn": ["desafioaethaina", "businessentity"], "alias": "businessentity", "checksum": {"name": "path", "checksum": "seeds/businessentity.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.411611, "relation_name": "`desafiothaina`.`dev_thaina`.`businessentity`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.address": {"database": "desafiothaina", "schema": "dev_thaina", "name": "address", "resource_type": "seed", "package_name": "desafioaethaina", "path": "address.csv", "original_file_path": "seeds/address.csv", "unique_id": "seed.desafioaethaina.address", "fqn": ["desafioaethaina", "address"], "alias": "address", "checksum": {"name": "path", "checksum": "seeds/address.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4216938, "relation_name": "`desafiothaina`.`dev_thaina`.`address`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.department": {"database": "desafiothaina", "schema": "dev_thaina", "name": "department", "resource_type": "seed", "package_name": "desafioaethaina", "path": "department.csv", "original_file_path": "seeds/department.csv", "unique_id": "seed.desafioaethaina.department", "fqn": ["desafioaethaina", "department"], "alias": "department", "checksum": {"name": "sha256", "checksum": "eaa1875ef832e2a82c7523bf9b72f768adabbad65e44abdd1238bdbaa4e19abc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4312205, "relation_name": "`desafiothaina`.`dev_thaina`.`department`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.countryregion": {"database": "desafiothaina", "schema": "dev_thaina", "name": "countryregion", "resource_type": "seed", "package_name": "desafioaethaina", "path": "countryregion.csv", "original_file_path": "seeds/countryregion.csv", "unique_id": "seed.desafioaethaina.countryregion", "fqn": ["desafioaethaina", "countryregion"], "alias": "countryregion", "checksum": {"name": "sha256", "checksum": "6095d5925b86c32e00bfb2d78b543ff6392b7e2e35c14bf4c894607e1bd5f964"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4425905, "relation_name": "`desafiothaina`.`dev_thaina`.`countryregion`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.emailaddress": {"database": "desafiothaina", "schema": "dev_thaina", "name": "emailaddress", "resource_type": "seed", "package_name": "desafioaethaina", "path": "emailaddress.csv", "original_file_path": "seeds/emailaddress.csv", "unique_id": "seed.desafioaethaina.emailaddress", "fqn": ["desafioaethaina", "emailaddress"], "alias": "emailaddress", "checksum": {"name": "path", "checksum": "seeds/emailaddress.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4526162, "relation_name": "`desafiothaina`.`dev_thaina`.`emailaddress`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.customer": {"database": "desafiothaina", "schema": "dev_thaina", "name": "customer", "resource_type": "seed", "package_name": "desafioaethaina", "path": "customer.csv", "original_file_path": "seeds/customer.csv", "unique_id": "seed.desafioaethaina.customer", "fqn": ["desafioaethaina", "customer"], "alias": "customer", "checksum": {"name": "path", "checksum": "seeds/customer.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4623082, "relation_name": "`desafiothaina`.`dev_thaina`.`customer`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productcosthistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productcosthistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productcosthistory.csv", "original_file_path": "seeds/productcosthistory.csv", "unique_id": "seed.desafioaethaina.productcosthistory", "fqn": ["desafioaethaina", "productcosthistory"], "alias": "productcosthistory", "checksum": {"name": "sha256", "checksum": "bc5da1cb081fb603776a0c3637353612b4a7a3ef3cb2265cd5b9b4152f2179e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4760828, "relation_name": "`desafiothaina`.`dev_thaina`.`productcosthistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.store": {"database": "desafiothaina", "schema": "dev_thaina", "name": "store", "resource_type": "seed", "package_name": "desafioaethaina", "path": "store.csv", "original_file_path": "seeds/store.csv", "unique_id": "seed.desafioaethaina.store", "fqn": ["desafioaethaina", "store"], "alias": "store", "checksum": {"name": "sha256", "checksum": "9ef73231ed5be6f955beff9266a3875330c89b9d681c80b6039ef9ccdac62536"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4844186, "relation_name": "`desafiothaina`.`dev_thaina`.`store`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.shoppingcartitem": {"database": "desafiothaina", "schema": "dev_thaina", "name": "shoppingcartitem", "resource_type": "seed", "package_name": "desafioaethaina", "path": "shoppingcartitem.csv", "original_file_path": "seeds/shoppingcartitem.csv", "unique_id": "seed.desafioaethaina.shoppingcartitem", "fqn": ["desafioaethaina", "shoppingcartitem"], "alias": "shoppingcartitem", "checksum": {"name": "sha256", "checksum": "a953fd35402cfd55ac36367e272a0fe112e2aef7ecd48820344b1589ff1f5eab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4890854, "relation_name": "`desafiothaina`.`dev_thaina`.`shoppingcartitem`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.scrapreason": {"database": "desafiothaina", "schema": "dev_thaina", "name": "scrapreason", "resource_type": "seed", "package_name": "desafioaethaina", "path": "scrapreason.csv", "original_file_path": "seeds/scrapreason.csv", "unique_id": "seed.desafioaethaina.scrapreason", "fqn": ["desafioaethaina", "scrapreason"], "alias": "scrapreason", "checksum": {"name": "sha256", "checksum": "05263b79fa48e1bdb310195bc3ac19fb75189505b06b1f10cc212648bbb9552b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.4932005, "relation_name": "`desafiothaina`.`dev_thaina`.`scrapreason`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.specialofferproduct": {"database": "desafiothaina", "schema": "dev_thaina", "name": "specialofferproduct", "resource_type": "seed", "package_name": "desafioaethaina", "path": "specialofferproduct.csv", "original_file_path": "seeds/specialofferproduct.csv", "unique_id": "seed.desafioaethaina.specialofferproduct", "fqn": ["desafioaethaina", "specialofferproduct"], "alias": "specialofferproduct", "checksum": {"name": "sha256", "checksum": "73c89ec804a060b39c320817a4dc9b5b583f90aca90c5cc86a218c6846083f73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.501443, "relation_name": "`desafiothaina`.`dev_thaina`.`specialofferproduct`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.currency": {"database": "desafiothaina", "schema": "dev_thaina", "name": "currency", "resource_type": "seed", "package_name": "desafioaethaina", "path": "currency.csv", "original_file_path": "seeds/currency.csv", "unique_id": "seed.desafioaethaina.currency", "fqn": ["desafioaethaina", "currency"], "alias": "currency", "checksum": {"name": "sha256", "checksum": "56f09fd8f3e0caa3fa04867d25feeb7b0938a38267cc837f694023e5e1b144c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5067735, "relation_name": "`desafiothaina`.`dev_thaina`.`currency`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productlistpricehistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productlistpricehistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productlistpricehistory.csv", "original_file_path": "seeds/productlistpricehistory.csv", "unique_id": "seed.desafioaethaina.productlistpricehistory", "fqn": ["desafioaethaina", "productlistpricehistory"], "alias": "productlistpricehistory", "checksum": {"name": "sha256", "checksum": "a81234a392158d7d6fc8f897ae589522267a794320c3eacf1663f2cdfc7df3e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5131423, "relation_name": "`desafiothaina`.`dev_thaina`.`productlistpricehistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.unitmeasure": {"database": "desafiothaina", "schema": "dev_thaina", "name": "unitmeasure", "resource_type": "seed", "package_name": "desafioaethaina", "path": "unitmeasure.csv", "original_file_path": "seeds/unitmeasure.csv", "unique_id": "seed.desafioaethaina.unitmeasure", "fqn": ["desafioaethaina", "unitmeasure"], "alias": "unitmeasure", "checksum": {"name": "sha256", "checksum": "16a25743cf1aeed3114b19b07d305eb5cf5ea789f81920f48c5721e3505d3876"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5214407, "relation_name": "`desafiothaina`.`dev_thaina`.`unitmeasure`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productinventory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productinventory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productinventory.csv", "original_file_path": "seeds/productinventory.csv", "unique_id": "seed.desafioaethaina.productinventory", "fqn": ["desafioaethaina", "productinventory"], "alias": "productinventory", "checksum": {"name": "sha256", "checksum": "8ffd494370589a24420d1fc325b2a82d628600c969c9da4f3dc0cb8d18012d4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.526011, "relation_name": "`desafiothaina`.`dev_thaina`.`productinventory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesorderheadersalesreason": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderheadersalesreason", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesorderheadersalesreason.csv", "original_file_path": "seeds/salesorderheadersalesreason.csv", "unique_id": "seed.desafioaethaina.salesorderheadersalesreason", "fqn": ["desafioaethaina", "salesorderheadersalesreason"], "alias": "salesorderheadersalesreason", "checksum": {"name": "sha256", "checksum": "c7187e6777b4e300dcbf6a596f58f0e99e67cd0f365cbc694ec61e7835fcf097"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5339882, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderheadersalesreason`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productmodelillustration": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productmodelillustration", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productmodelillustration.csv", "original_file_path": "seeds/productmodelillustration.csv", "unique_id": "seed.desafioaethaina.productmodelillustration", "fqn": ["desafioaethaina", "productmodelillustration"], "alias": "productmodelillustration", "checksum": {"name": "sha256", "checksum": "763b14de98f52b535366023e4678ee5a4e1f88fc68769d8042ce433aab798f62"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5390453, "relation_name": "`desafiothaina`.`dev_thaina`.`productmodelillustration`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.personcreditcard": {"database": "desafiothaina", "schema": "dev_thaina", "name": "personcreditcard", "resource_type": "seed", "package_name": "desafioaethaina", "path": "personcreditcard.csv", "original_file_path": "seeds/personcreditcard.csv", "unique_id": "seed.desafioaethaina.personcreditcard", "fqn": ["desafioaethaina", "personcreditcard"], "alias": "personcreditcard", "checksum": {"name": "sha256", "checksum": "c0f8c605916bed4e16cbc8690d8bb3c12e6feef8ff8ae209dfd7a700e16e1c1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.545509, "relation_name": "`desafiothaina`.`dev_thaina`.`personcreditcard`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productsubcategory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productsubcategory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productsubcategory.csv", "original_file_path": "seeds/productsubcategory.csv", "unique_id": "seed.desafioaethaina.productsubcategory", "fqn": ["desafioaethaina", "productsubcategory"], "alias": "productsubcategory", "checksum": {"name": "sha256", "checksum": "ed609593264d0aa65d57319a0d51198999d9dfaf6c2a003310201f2332afb6d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5525088, "relation_name": "`desafiothaina`.`dev_thaina`.`productsubcategory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productdescription": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productdescription", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productdescription.csv", "original_file_path": "seeds/productdescription.csv", "unique_id": "seed.desafioaethaina.productdescription", "fqn": ["desafioaethaina", "productdescription"], "alias": "productdescription", "checksum": {"name": "sha256", "checksum": "cadbacbb263524efc0b5a380a93cd97acdec5bdfaab950c5d9458fd8fa1539c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5575826, "relation_name": "`desafiothaina`.`dev_thaina`.`productdescription`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salespersonquotahistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salespersonquotahistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salespersonquotahistory.csv", "original_file_path": "seeds/salespersonquotahistory.csv", "unique_id": "seed.desafioaethaina.salespersonquotahistory", "fqn": ["desafioaethaina", "salespersonquotahistory"], "alias": "salespersonquotahistory", "checksum": {"name": "sha256", "checksum": "b26f3f9f2625330666c0d82de817cb270dbf3e9f47ee87a38ceca3b6933b888b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5656576, "relation_name": "`desafiothaina`.`dev_thaina`.`salespersonquotahistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesterritoryhistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesterritoryhistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesterritoryhistory.csv", "original_file_path": "seeds/salesterritoryhistory.csv", "unique_id": "seed.desafioaethaina.salesterritoryhistory", "fqn": ["desafioaethaina", "salesterritoryhistory"], "alias": "salesterritoryhistory", "checksum": {"name": "sha256", "checksum": "ee54ea3b5e1451adc2d1f370d98141ba80dbf0de672f4bdfc7deff8c5500fa10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5725007, "relation_name": "`desafiothaina`.`dev_thaina`.`salesterritoryhistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.transactionhistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "transactionhistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "transactionhistory.csv", "original_file_path": "seeds/transactionhistory.csv", "unique_id": "seed.desafioaethaina.transactionhistory", "fqn": ["desafioaethaina", "transactionhistory"], "alias": "transactionhistory", "checksum": {"name": "path", "checksum": "seeds/transactionhistory.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5774758, "relation_name": "`desafiothaina`.`dev_thaina`.`transactionhistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.vendor": {"database": "desafiothaina", "schema": "dev_thaina", "name": "vendor", "resource_type": "seed", "package_name": "desafioaethaina", "path": "vendor.csv", "original_file_path": "seeds/vendor.csv", "unique_id": "seed.desafioaethaina.vendor", "fqn": ["desafioaethaina", "vendor"], "alias": "vendor", "checksum": {"name": "sha256", "checksum": "313c8c7bfd60369a591687817ea80fa64d56a6ed105f75ec7cf1b3486f2cf514"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5838625, "relation_name": "`desafiothaina`.`dev_thaina`.`vendor`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesperson": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesperson", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesperson.csv", "original_file_path": "seeds/salesperson.csv", "unique_id": "seed.desafioaethaina.salesperson", "fqn": ["desafioaethaina", "salesperson"], "alias": "salesperson", "checksum": {"name": "sha256", "checksum": "7b12c5a125c05eec56ac66639472167c565bbc847ca40119a298b7f528959961"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5890985, "relation_name": "`desafiothaina`.`dev_thaina`.`salesperson`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.stateprovince": {"database": "desafiothaina", "schema": "dev_thaina", "name": "stateprovince", "resource_type": "seed", "package_name": "desafioaethaina", "path": "stateprovince.csv", "original_file_path": "seeds/stateprovince.csv", "unique_id": "seed.desafioaethaina.stateprovince", "fqn": ["desafioaethaina", "stateprovince"], "alias": "stateprovince", "checksum": {"name": "sha256", "checksum": "6812ef09853ae5a0ebcb471f8cc23f44b8e2ea9f7373c61f0ad08a63b5d851bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.5938137, "relation_name": "`desafiothaina`.`dev_thaina`.`stateprovince`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesreason": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesreason", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesreason.csv", "original_file_path": "seeds/salesreason.csv", "unique_id": "seed.desafioaethaina.salesreason", "fqn": ["desafioaethaina", "salesreason"], "alias": "salesreason", "checksum": {"name": "sha256", "checksum": "f70ab5944a14c994df78f32e605d432a814d0c73fd28f8cb4ea3f04b0b00b35d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.601056, "relation_name": "`desafiothaina`.`dev_thaina`.`salesreason`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.businessentityaddress": {"database": "desafiothaina", "schema": "dev_thaina", "name": "businessentityaddress", "resource_type": "seed", "package_name": "desafioaethaina", "path": "businessentityaddress.csv", "original_file_path": "seeds/businessentityaddress.csv", "unique_id": "seed.desafioaethaina.businessentityaddress", "fqn": ["desafioaethaina", "businessentityaddress"], "alias": "businessentityaddress", "checksum": {"name": "path", "checksum": "seeds/businessentityaddress.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6058972, "relation_name": "`desafiothaina`.`dev_thaina`.`businessentityaddress`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.addresstype": {"database": "desafiothaina", "schema": "dev_thaina", "name": "addresstype", "resource_type": "seed", "package_name": "desafioaethaina", "path": "addresstype.csv", "original_file_path": "seeds/addresstype.csv", "unique_id": "seed.desafioaethaina.addresstype", "fqn": ["desafioaethaina", "addresstype"], "alias": "addresstype", "checksum": {"name": "sha256", "checksum": "1c18498bfe173903161160302c2dc9138abfa2eafdea3e0c862aaefd60dbc708"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6113214, "relation_name": "`desafiothaina`.`dev_thaina`.`addresstype`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.employee": {"database": "desafiothaina", "schema": "dev_thaina", "name": "employee", "resource_type": "seed", "package_name": "desafioaethaina", "path": "employee.csv", "original_file_path": "seeds/employee.csv", "unique_id": "seed.desafioaethaina.employee", "fqn": ["desafioaethaina", "employee"], "alias": "employee", "checksum": {"name": "sha256", "checksum": "03a3598a153540ea0b0c4aeb35f554336d4957e511c3282ae34616403c731966"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6184597, "relation_name": "`desafiothaina`.`dev_thaina`.`employee`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.productmodel": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productmodel", "resource_type": "seed", "package_name": "desafioaethaina", "path": "productmodel.csv", "original_file_path": "seeds/productmodel.csv", "unique_id": "seed.desafioaethaina.productmodel", "fqn": ["desafioaethaina", "productmodel"], "alias": "productmodel", "checksum": {"name": "sha256", "checksum": "149653b9c42894a5e9eef3843097cd477eb5a17e441baee8d09c76997982b1fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6227713, "relation_name": "`desafiothaina`.`dev_thaina`.`productmodel`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salesorderheader": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderheader", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salesorderheader.csv", "original_file_path": "seeds/salesorderheader.csv", "unique_id": "seed.desafioaethaina.salesorderheader", "fqn": ["desafioaethaina", "salesorderheader"], "alias": "salesorderheader", "checksum": {"name": "path", "checksum": "seeds/salesorderheader.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6286469, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderheader`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.currencyrate": {"database": "desafiothaina", "schema": "dev_thaina", "name": "currencyrate", "resource_type": "seed", "package_name": "desafioaethaina", "path": "currencyrate.csv", "original_file_path": "seeds/currencyrate.csv", "unique_id": "seed.desafioaethaina.currencyrate", "fqn": ["desafioaethaina", "currencyrate"], "alias": "currencyrate", "checksum": {"name": "sha256", "checksum": "d9776ebd680fb0ac9f470e60c08844da2cb0a498ca9368f8c148b9857a7b78d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6370883, "relation_name": "`desafiothaina`.`dev_thaina`.`currencyrate`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.contacttype": {"database": "desafiothaina", "schema": "dev_thaina", "name": "contacttype", "resource_type": "seed", "package_name": "desafioaethaina", "path": "contacttype.csv", "original_file_path": "seeds/contacttype.csv", "unique_id": "seed.desafioaethaina.contacttype", "fqn": ["desafioaethaina", "contacttype"], "alias": "contacttype", "checksum": {"name": "sha256", "checksum": "90dfcee4777b8e509721bf6db9ddbba1d1a1f55e9d2d60ef8eec9bb1de06efe0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6421633, "relation_name": "`desafiothaina`.`dev_thaina`.`contacttype`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.employeepayhistory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "employeepayhistory", "resource_type": "seed", "package_name": "desafioaethaina", "path": "employeepayhistory.csv", "original_file_path": "seeds/employeepayhistory.csv", "unique_id": "seed.desafioaethaina.employeepayhistory", "fqn": ["desafioaethaina", "employeepayhistory"], "alias": "employeepayhistory", "checksum": {"name": "sha256", "checksum": "4648dee4352e6c01df8ff94f5908c8709d066c0781ec92ca25d14e87e7a3efdb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6495142, "relation_name": "`desafiothaina`.`dev_thaina`.`employeepayhistory`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.creditcard": {"database": "desafiothaina", "schema": "dev_thaina", "name": "creditcard", "resource_type": "seed", "package_name": "desafioaethaina", "path": "creditcard.csv", "original_file_path": "seeds/creditcard.csv", "unique_id": "seed.desafioaethaina.creditcard", "fqn": ["desafioaethaina", "creditcard"], "alias": "creditcard", "checksum": {"name": "path", "checksum": "seeds/creditcard.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6561482, "relation_name": "`desafiothaina`.`dev_thaina`.`creditcard`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.salestaxrate": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salestaxrate", "resource_type": "seed", "package_name": "desafioaethaina", "path": "salestaxrate.csv", "original_file_path": "seeds/salestaxrate.csv", "unique_id": "seed.desafioaethaina.salestaxrate", "fqn": ["desafioaethaina", "salestaxrate"], "alias": "salestaxrate", "checksum": {"name": "sha256", "checksum": "2107639403099d2990c885e18ea74c19aecbdccc3c0dd55b4cb740ad7f776dfa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6636944, "relation_name": "`desafiothaina`.`dev_thaina`.`salestaxrate`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.jobcandidate": {"database": "desafiothaina", "schema": "dev_thaina", "name": "jobcandidate", "resource_type": "seed", "package_name": "desafioaethaina", "path": "jobcandidate.csv", "original_file_path": "seeds/jobcandidate.csv", "unique_id": "seed.desafioaethaina.jobcandidate", "fqn": ["desafioaethaina", "jobcandidate"], "alias": "jobcandidate", "checksum": {"name": "sha256", "checksum": "b956cd176041cb6e3eaf0680f3bd1888e131433a6c23d85aa530580e6331a356"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6700175, "relation_name": "`desafiothaina`.`dev_thaina`.`jobcandidate`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.workorderrouting": {"database": "desafiothaina", "schema": "dev_thaina", "name": "workorderrouting", "resource_type": "seed", "package_name": "desafioaethaina", "path": "workorderrouting.csv", "original_file_path": "seeds/workorderrouting.csv", "unique_id": "seed.desafioaethaina.workorderrouting", "fqn": ["desafioaethaina", "workorderrouting"], "alias": "workorderrouting", "checksum": {"name": "path", "checksum": "seeds/workorderrouting.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6752994, "relation_name": "`desafiothaina`.`dev_thaina`.`workorderrouting`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.personphone": {"database": "desafiothaina", "schema": "dev_thaina", "name": "personphone", "resource_type": "seed", "package_name": "desafioaethaina", "path": "personphone.csv", "original_file_path": "seeds/personphone.csv", "unique_id": "seed.desafioaethaina.personphone", "fqn": ["desafioaethaina", "personphone"], "alias": "personphone", "checksum": {"name": "sha256", "checksum": "d033cf18b126c0a6168790ae1e80ad4a6584a6cc9bc52f83efb3adfedf8e963e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.6821873, "relation_name": "`desafiothaina`.`dev_thaina`.`personphone`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "seed.desafioaethaina.countryregioncurrency": {"database": "desafiothaina", "schema": "dev_thaina", "name": "countryregioncurrency", "resource_type": "seed", "package_name": "desafioaethaina", "path": "countryregioncurrency.csv", "original_file_path": "seeds/countryregioncurrency.csv", "unique_id": "seed.desafioaethaina.countryregioncurrency", "fqn": ["desafioaethaina", "countryregioncurrency"], "alias": "countryregioncurrency", "checksum": {"name": "sha256", "checksum": "29d33884145b4285b58e679325bb175d3d2af5cd6659a31a543b750c6ffd1217"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496928.688521, "relation_name": "`desafiothaina`.`dev_thaina`.`countryregioncurrency`", "raw_code": "", "root_path": "/home/thaina/indicium_particular/desafio/desafiothaina", "depends_on": {"macros": []}}, "test.desafioaethaina.source_not_null_source_dw_product_productid.4acbde7c03": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('source_dw', 'product')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_product_productid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_product_productid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_product_productid.4acbde7c03", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_product_productid"], "alias": "source_not_null_source_dw_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2674923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "product"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_product_productid.126b64db49": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('source_dw', 'product')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_product_productid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_product_productid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_product_productid.126b64db49", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_product_productid"], "alias": "source_unique_source_dw_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.27176, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "product"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_product_name.833d5e85d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'product')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_product_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_product_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_product_name.833d5e85d5", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_product_name"], "alias": "source_not_null_source_dw_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2756784, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "product"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.product"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_location_locationid.fa8bc49561": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "locationid", "model": "{{ get_where_subquery(source('source_dw', 'location')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_location_locationid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_location_locationid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_location_locationid.fa8bc49561", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_location_locationid"], "alias": "source_not_null_source_dw_location_locationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2814598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "location"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.location"]}, "compiled_path": null, "column_name": "locationid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_location_locationid.be0911bc72": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "locationid", "model": "{{ get_where_subquery(source('source_dw', 'location')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_location_locationid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_location_locationid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_location_locationid.be0911bc72", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_location_locationid"], "alias": "source_unique_source_dw_location_locationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2858582, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "location"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.location"]}, "compiled_path": null, "column_name": "locationid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_location_name.b27c68526a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'location')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_location_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_location_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_location_name.b27c68526a", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_location_name"], "alias": "source_not_null_source_dw_location_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2898295, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "location"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.location"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_location_name.e9558cfb13": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'location')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_location_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_location_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_location_name.e9558cfb13", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_location_name"], "alias": "source_unique_source_dw_location_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2948182, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "location"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.location"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productcategory_productcategoryid.e93119a70f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('source_dw', 'productcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productcategory_productcategoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productcategory_productcategoryid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productcategory_productcategoryid.e93119a70f", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productcategory_productcategoryid"], "alias": "source_not_null_source_dw_productcategory_productcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.2994068, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productcategory"]}, "compiled_path": null, "column_name": "productcategoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_productcategory_productcategoryid.c475c15972": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('source_dw', 'productcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_productcategory_productcategoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_productcategory_productcategoryid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_productcategory_productcategoryid.c475c15972", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_productcategory_productcategoryid"], "alias": "source_unique_source_dw_productcategory_productcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3033538, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.productcategory"]}, "compiled_path": null, "column_name": "productcategoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productcategory_name.1c0280d467": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'productcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productcategory_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productcategory_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productcategory_name.1c0280d467", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productcategory_name"], "alias": "source_not_null_source_dw_productcategory_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3072367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productcategory"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_productcategory_name.fad8e4b0b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'productcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_productcategory_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_productcategory_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_productcategory_name.fad8e4b0b1", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_productcategory_name"], "alias": "source_unique_source_dw_productcategory_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3122828, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.productcategory"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productsubcategoryid.9e73efd34b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('source_dw', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productsubcategory_productsubcategoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_prod_a8029ff7bec7e6b09894b38612b31e7d.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productsubcategoryid.9e73efd34b", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productsubcategory_productsubcategoryid"], "alias": "source_not_null_source_dw_prod_a8029ff7bec7e6b09894b38612b31e7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_dw_prod_a8029ff7bec7e6b09894b38612b31e7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_dw_prod_a8029ff7bec7e6b09894b38612b31e7d"}, "created_at": 1688496929.316771, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_dw_prod_a8029ff7bec7e6b09894b38612b31e7d\") }}", "language": "sql", "refs": [], "sources": [["source_dw", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productsubcategory"]}, "compiled_path": null, "column_name": "productsubcategoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_productsubcategory_productsubcategoryid.079c1171e7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('source_dw', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_productsubcategory_productsubcategoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_productsubcategory_productsubcategoryid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_productsubcategory_productsubcategoryid.079c1171e7", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_productsubcategory_productsubcategoryid"], "alias": "source_unique_source_dw_productsubcategory_productsubcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3218405, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.productsubcategory"]}, "compiled_path": null, "column_name": "productsubcategoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productcategoryid.eb82c688f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('source_dw', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productsubcategory_productcategoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productsubcategory_productcategoryid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productcategoryid.eb82c688f8", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productsubcategory_productcategoryid"], "alias": "source_not_null_source_dw_productsubcategory_productcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3260007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productsubcategory"]}, "compiled_path": null, "column_name": "productcategoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productsubcategory_name.03b9e42a75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productsubcategory_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productsubcategory_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productsubcategory_name.03b9e42a75", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productsubcategory_name"], "alias": "source_not_null_source_dw_productsubcategory_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3308978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productsubcategory"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productmodel_productmodelid.60f751f4be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productmodelid", "model": "{{ get_where_subquery(source('source_dw', 'productmodel')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productmodel_productmodelid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productmodel_productmodelid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productmodel_productmodelid.60f751f4be", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productmodel_productmodelid"], "alias": "source_not_null_source_dw_productmodel_productmodelid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3360233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productmodel"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productmodel"]}, "compiled_path": null, "column_name": "productmodelid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_productmodel_productmodelid.8d9370db49": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productmodelid", "model": "{{ get_where_subquery(source('source_dw', 'productmodel')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_productmodel_productmodelid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_productmodel_productmodelid.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_productmodel_productmodelid.8d9370db49", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_productmodel_productmodelid"], "alias": "source_unique_source_dw_productmodel_productmodelid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.340032, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productmodel"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.productmodel"]}, "compiled_path": null, "column_name": "productmodelid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_productmodel_name.ccd6f43041": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'productmodel')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_productmodel_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_productmodel_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_productmodel_name.ccd6f43041", "fqn": ["desafioaethaina", "silver", "products", "source_not_null_source_dw_productmodel_name"], "alias": "source_not_null_source_dw_productmodel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3455772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productmodel"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.productmodel"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_productmodel_name.842abd497c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'productmodel')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_productmodel_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_productmodel_name.sql", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_productmodel_name.842abd497c", "fqn": ["desafioaethaina", "silver", "products", "source_unique_source_dw_productmodel_name"], "alias": "source_unique_source_dw_productmodel_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.352934, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "productmodel"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.productmodel"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_shipmethod_shipmethodid.90ef3ec559": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipmethodid", "model": "{{ get_where_subquery(source('source_dw', 'shipmethod')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_shipmethod_shipmethodid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_shipmethod_shipmethodid.sql", "original_file_path": "models/silver/purchasing/sources_purchasing.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_shipmethod_shipmethodid.90ef3ec559", "fqn": ["desafioaethaina", "silver", "purchasing", "source_not_null_source_dw_shipmethod_shipmethodid"], "alias": "source_not_null_source_dw_shipmethod_shipmethodid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3605342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "shipmethod"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.shipmethod"]}, "compiled_path": null, "column_name": "shipmethodid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_shipmethod_shipmethodid.52e6a83698": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shipmethodid", "model": "{{ get_where_subquery(source('source_dw', 'shipmethod')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_shipmethod_shipmethodid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_shipmethod_shipmethodid.sql", "original_file_path": "models/silver/purchasing/sources_purchasing.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_shipmethod_shipmethodid.52e6a83698", "fqn": ["desafioaethaina", "silver", "purchasing", "source_unique_source_dw_shipmethod_shipmethodid"], "alias": "source_unique_source_dw_shipmethod_shipmethodid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.36455, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "shipmethod"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.shipmethod"]}, "compiled_path": null, "column_name": "shipmethodid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_customer_customerid.d31108f8a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('source_dw', 'customer')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_customer_customerid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_customer_customerid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_customer_customerid.d31108f8a7", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_customer_customerid"], "alias": "source_not_null_source_dw_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3692214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_customer_customerid.ed1cb3ee62": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('source_dw', 'customer')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_customer_customerid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_customer_customerid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_customer_customerid.ed1cb3ee62", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_customer_customerid"], "alias": "source_unique_source_dw_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3731256, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_customer_territoryid.28832b91c4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "territoryid", "model": "{{ get_where_subquery(source('source_dw', 'customer')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_customer_territoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_customer_territoryid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_customer_territoryid.28832b91c4", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_customer_territoryid"], "alias": "source_not_null_source_dw_customer_territoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3766491, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.customer"]}, "compiled_path": null, "column_name": "territoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_salesorderdetail_salesorderdetailid.c81c30b56d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('source_dw', 'salesorderdetail')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_salesorderdetail_salesorderdetailid.c81c30b56d", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_salesorderdetail_salesorderdetailid"], "alias": "source_not_null_source_dw_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3810556, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_salesorderdetail_salesorderdetailid.b5dadbf660": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('source_dw', 'salesorderdetail')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_salesorderdetail_salesorderdetailid.b5dadbf660", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_salesorderdetail_salesorderdetailid"], "alias": "source_unique_source_dw_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3859, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_salesorderheader_salesorderid.2c404de264": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('source_dw', 'salesorderheader')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_salesorderheader_salesorderid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_salesorderheader_salesorderid.2c404de264", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_salesorderheader_salesorderid"], "alias": "source_not_null_source_dw_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.390031, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderheader"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_salesorderheader_salesorderid.5e09f27a18": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('source_dw', 'salesorderheader')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_salesorderheader_salesorderid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_salesorderheader_salesorderid.5e09f27a18", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_salesorderheader_salesorderid"], "alias": "source_unique_source_dw_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.3934376, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderheader"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_salesorderheadersalesreason_salesorderid.a0772468dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('source_dw', 'salesorderheadersalesreason')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_salesorderheadersalesreason_salesorderid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_sale_aabc90b8c64c66a95376512b8a8c1a26.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_salesorderheadersalesreason_salesorderid.a0772468dc", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_salesorderheadersalesreason_salesorderid"], "alias": "source_not_null_source_dw_sale_aabc90b8c64c66a95376512b8a8c1a26", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_dw_sale_aabc90b8c64c66a95376512b8a8c1a26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_dw_sale_aabc90b8c64c66a95376512b8a8c1a26"}, "created_at": 1688496929.39762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_dw_sale_aabc90b8c64c66a95376512b8a8c1a26\") }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesorderheadersalesreason"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.salesorderheadersalesreason"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_salesperson_businessentityid.3a0ce53fc6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'salesperson')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_salesperson_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_salesperson_businessentityid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_salesperson_businessentityid.3a0ce53fc6", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_salesperson_businessentityid"], "alias": "source_not_null_source_dw_salesperson_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4019632, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesperson"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.salesperson"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_salesperson_businessentityid.430dc99789": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'salesperson')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_salesperson_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_salesperson_businessentityid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_salesperson_businessentityid.430dc99789", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_salesperson_businessentityid"], "alias": "source_unique_source_dw_salesperson_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4057732, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesperson"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.salesperson"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_salesreason_salesreasonid.3cae51d484": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('source_dw', 'salesreason')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_salesreason_salesreasonid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_salesreason_salesreasonid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_salesreason_salesreasonid.3cae51d484", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_salesreason_salesreasonid"], "alias": "source_not_null_source_dw_salesreason_salesreasonid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.409907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesreason"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.salesreason"]}, "compiled_path": null, "column_name": "salesreasonid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_salesterritory_territoryid.027173e845": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "territoryid", "model": "{{ get_where_subquery(source('source_dw', 'salesterritory')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_salesterritory_territoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_salesterritory_territoryid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_salesterritory_territoryid.027173e845", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_salesterritory_territoryid"], "alias": "source_unique_source_dw_salesterritory_territoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4149415, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "salesterritory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.salesterritory"]}, "compiled_path": null, "column_name": "territoryid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_creditcard_creditcardid.3872dc2846": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('source_dw', 'creditcard')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_creditcard_creditcardid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_creditcard_creditcardid.3872dc2846", "fqn": ["desafioaethaina", "silver", "sales", "source_not_null_source_dw_creditcard_creditcardid"], "alias": "source_not_null_source_dw_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4192996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "creditcard"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_creditcard_creditcardid.31a510b993": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('source_dw', 'creditcard')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_creditcard_creditcardid.sql", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_creditcard_creditcardid.31a510b993", "fqn": ["desafioaethaina", "silver", "sales", "source_unique_source_dw_creditcard_creditcardid"], "alias": "source_unique_source_dw_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4231505, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "creditcard"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_address_addressid.7a44ee75b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('source_dw', 'address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_address_addressid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_address_addressid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_address_addressid.7a44ee75b0", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_address_addressid"], "alias": "source_not_null_source_dw_address_addressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4287946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "address"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.address"]}, "compiled_path": null, "column_name": "addressid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_address_addressid.7019473590": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('source_dw', 'address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_address_addressid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_address_addressid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_address_addressid.7019473590", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_address_addressid"], "alias": "source_unique_source_dw_address_addressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4328585, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "address"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.address"]}, "compiled_path": null, "column_name": "addressid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_addresstype_addresstypeid.564eb03bb4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addresstypeid", "model": "{{ get_where_subquery(source('source_dw', 'addresstype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_addresstype_addresstypeid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_addresstype_addresstypeid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_addresstype_addresstypeid.564eb03bb4", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_addresstype_addresstypeid"], "alias": "source_not_null_source_dw_addresstype_addresstypeid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4371383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "addresstype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.addresstype"]}, "compiled_path": null, "column_name": "addresstypeid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_addresstype_addresstypeid.076e9694ad": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "addresstypeid", "model": "{{ get_where_subquery(source('source_dw', 'addresstype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_addresstype_addresstypeid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_addresstype_addresstypeid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_addresstype_addresstypeid.076e9694ad", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_addresstype_addresstypeid"], "alias": "source_unique_source_dw_addresstype_addresstypeid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4412818, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "addresstype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.addresstype"]}, "compiled_path": null, "column_name": "addresstypeid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_addresstype_name.13e164d432": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'addresstype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_addresstype_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_addresstype_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_addresstype_name.13e164d432", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_addresstype_name"], "alias": "source_not_null_source_dw_addresstype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4468517, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "addresstype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.addresstype"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_addresstype_name.49c2b62dc2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'addresstype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_addresstype_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_addresstype_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_addresstype_name.49c2b62dc2", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_addresstype_name"], "alias": "source_unique_source_dw_addresstype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4505148, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "addresstype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.addresstype"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_contacttype_contacttypeid.58a3a6f69d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contacttypeid", "model": "{{ get_where_subquery(source('source_dw', 'contacttype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_contacttype_contacttypeid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_contacttype_contacttypeid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_contacttype_contacttypeid.58a3a6f69d", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_contacttype_contacttypeid"], "alias": "source_not_null_source_dw_contacttype_contacttypeid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4544556, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "contacttype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.contacttype"]}, "compiled_path": null, "column_name": "contacttypeid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_contacttype_contacttypeid.74f5c55a5d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contacttypeid", "model": "{{ get_where_subquery(source('source_dw', 'contacttype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_contacttype_contacttypeid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_contacttype_contacttypeid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_contacttype_contacttypeid.74f5c55a5d", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_contacttype_contacttypeid"], "alias": "source_unique_source_dw_contacttype_contacttypeid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.458075, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "contacttype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.contacttype"]}, "compiled_path": null, "column_name": "contacttypeid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_contacttype_name.d7bcb58766": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'contacttype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_contacttype_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_contacttype_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_contacttype_name.d7bcb58766", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_contacttype_name"], "alias": "source_not_null_source_dw_contacttype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.462104, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "contacttype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.contacttype"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_contacttype_name.961d2bbc62": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'contacttype')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_contacttype_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_contacttype_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_contacttype_name.961d2bbc62", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_contacttype_name"], "alias": "source_unique_source_dw_contacttype_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4684408, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "contacttype"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.contacttype"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_countryregion_countryregioncode.443c601419": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('source_dw', 'countryregion')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_countryregion_countryregioncode", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_countryregion_countryregioncode.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_countryregion_countryregioncode.443c601419", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_countryregion_countryregioncode"], "alias": "source_not_null_source_dw_countryregion_countryregioncode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.473876, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.countryregion"]}, "compiled_path": null, "column_name": "countryregioncode", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_countryregion_countryregioncode.0f980716dc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('source_dw', 'countryregion')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_countryregion_countryregioncode", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_countryregion_countryregioncode.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_countryregion_countryregioncode.0f980716dc", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_countryregion_countryregioncode"], "alias": "source_unique_source_dw_countryregion_countryregioncode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4785597, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.countryregion"]}, "compiled_path": null, "column_name": "countryregioncode", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_countryregion_name.79adbe52d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'countryregion')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_countryregion_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_countryregion_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_countryregion_name.79adbe52d4", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_countryregion_name"], "alias": "source_not_null_source_dw_countryregion_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4825356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.countryregion"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_countryregion_name.d5b57c6b5e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'countryregion')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_countryregion_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_countryregion_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_countryregion_name.d5b57c6b5e", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_countryregion_name"], "alias": "source_unique_source_dw_countryregion_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4860482, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.countryregion"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_businessentityid.5f8910090e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'businessentityaddress')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_businessentityaddress_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_busi_561669d1c0602b8f884604f710bab141.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_businessentityid.5f8910090e", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_businessentityaddress_businessentityid"], "alias": "source_not_null_source_dw_busi_561669d1c0602b8f884604f710bab141", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_dw_busi_561669d1c0602b8f884604f710bab141", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_dw_busi_561669d1c0602b8f884604f710bab141"}, "created_at": 1688496929.4897244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_dw_busi_561669d1c0602b8f884604f710bab141\") }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentityaddress"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.businessentityaddress"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addressid.8cec201a33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('source_dw', 'businessentityaddress')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_businessentityaddress_addressid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_businessentityaddress_addressid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addressid.8cec201a33", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_businessentityaddress_addressid"], "alias": "source_not_null_source_dw_businessentityaddress_addressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4934216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentityaddress"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.businessentityaddress"]}, "compiled_path": null, "column_name": "addressid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addresstypeid.73a0833a49": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addresstypeid", "model": "{{ get_where_subquery(source('source_dw', 'businessentityaddress')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_businessentityaddress_addresstypeid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_businessentityaddress_addresstypeid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addresstypeid.73a0833a49", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_businessentityaddress_addresstypeid"], "alias": "source_not_null_source_dw_businessentityaddress_addresstypeid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.4973445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentityaddress"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.businessentityaddress"]}, "compiled_path": null, "column_name": "addresstypeid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_businessentityid.75c9140add": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'businessentitycontact')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_businessentitycontact_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_busi_13b9aff85e34658c07bae417aa04ccc2.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_businessentityid.75c9140add", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_businessentitycontact_businessentityid"], "alias": "source_not_null_source_dw_busi_13b9aff85e34658c07bae417aa04ccc2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_source_dw_busi_13b9aff85e34658c07bae417aa04ccc2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_source_dw_busi_13b9aff85e34658c07bae417aa04ccc2"}, "created_at": 1688496929.5008965, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_source_dw_busi_13b9aff85e34658c07bae417aa04ccc2\") }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentitycontact"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.businessentitycontact"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_personid.c5b632a6a6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "personid", "model": "{{ get_where_subquery(source('source_dw', 'businessentitycontact')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_businessentitycontact_personid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_businessentitycontact_personid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_personid.c5b632a6a6", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_businessentitycontact_personid"], "alias": "source_not_null_source_dw_businessentitycontact_personid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.504777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentitycontact"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.businessentitycontact"]}, "compiled_path": null, "column_name": "personid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_businessentitycontact_personid.8dd5bb14a3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "personid", "model": "{{ get_where_subquery(source('source_dw', 'businessentitycontact')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_businessentitycontact_personid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_businessentitycontact_personid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_businessentitycontact_personid.8dd5bb14a3", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_businessentitycontact_personid"], "alias": "source_unique_source_dw_businessentitycontact_personid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5089443, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "businessentitycontact"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.businessentitycontact"]}, "compiled_path": null, "column_name": "personid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_person_businessentityid.3289b8551c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'person')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_person_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_person_businessentityid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_person_businessentityid.3289b8551c", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_person_businessentityid"], "alias": "source_not_null_source_dw_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.51276, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.person"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_person_businessentityid.ab2004ab7d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('source_dw', 'person')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_person_businessentityid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_person_businessentityid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_person_businessentityid.ab2004ab7d", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_person_businessentityid"], "alias": "source_unique_source_dw_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5160143, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.person"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_person_persontype.fd87678f00": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "persontype", "model": "{{ get_where_subquery(source('source_dw', 'person')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_person_persontype", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_person_persontype.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_person_persontype.fd87678f00", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_person_persontype"], "alias": "source_not_null_source_dw_person_persontype", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5191324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.person"]}, "compiled_path": null, "column_name": "persontype", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovinceid.8473ad24cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_stateprovince_stateprovinceid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_stateprovince_stateprovinceid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovinceid.8473ad24cc", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_stateprovince_stateprovinceid"], "alias": "source_not_null_source_dw_stateprovince_stateprovinceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5229962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "stateprovinceid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_unique_source_dw_stateprovince_stateprovinceid.c2a006dfc5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_unique_source_dw_stateprovince_stateprovinceid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_unique_source_dw_stateprovince_stateprovinceid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_unique_source_dw_stateprovince_stateprovinceid.c2a006dfc5", "fqn": ["desafioaethaina", "silver", "person", "source_unique_source_dw_stateprovince_stateprovinceid"], "alias": "source_unique_source_dw_stateprovince_stateprovinceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.526314, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "stateprovinceid", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovincecode.b985f26ece": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stateprovincecode", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_stateprovince_stateprovincecode", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_stateprovince_stateprovincecode.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovincecode.b985f26ece", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_stateprovince_stateprovincecode"], "alias": "source_not_null_source_dw_stateprovince_stateprovincecode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5296047, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "stateprovincecode", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_stateprovince_countryregioncode.99c1deafae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_stateprovince_countryregioncode", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_stateprovince_countryregioncode.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_stateprovince_countryregioncode.99c1deafae", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_stateprovince_countryregioncode"], "alias": "source_not_null_source_dw_stateprovince_countryregioncode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5330486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "countryregioncode", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_stateprovince_name.cbba3b6969": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_stateprovince_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_stateprovince_name.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_stateprovince_name.cbba3b6969", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_stateprovince_name"], "alias": "source_not_null_source_dw_stateprovince_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5362406, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "name", "file_key_name": "sources.source_dw"}, "test.desafioaethaina.source_not_null_source_dw_stateprovince_territoryid.d2dd290fe7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "territoryid", "model": "{{ get_where_subquery(source('source_dw', 'stateprovince')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "source_not_null_source_dw_stateprovince_territoryid", "resource_type": "test", "package_name": "desafioaethaina", "path": "source_not_null_source_dw_stateprovince_territoryid.sql", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "test.desafioaethaina.source_not_null_source_dw_stateprovince_territoryid.d2dd290fe7", "fqn": ["desafioaethaina", "silver", "person", "source_not_null_source_dw_stateprovince_territoryid"], "alias": "source_not_null_source_dw_stateprovince_territoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688496929.5394206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["source_dw", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaethaina.source_dw.stateprovince"]}, "compiled_path": null, "column_name": "territoryid", "file_key_name": "sources.source_dw"}, "model.desafioaethaina.dim_dates": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_dates", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_dates.sql", "original_file_path": "models/gold/dim_dates.sql", "unique_id": "model.desafioaethaina.dim_dates", "fqn": ["desafioaethaina", "gold", "dim_dates"], "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "feea6d433b2070a6787bcfeec8af4909d688b66bb23d1c4e944a5f32e5a7fe6f"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688499343.8315325, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_dates`", "raw_code": "/* Using dbt_utils to create a sequence of days. */\nwith date_series as (\n           {{ dbt_utils.date_spine(\n                datepart=\"day\",\n                start_date= \"cast('2011-05-01' as date)\", \n                end_date=\"cast('2014-07-31' as date)\"\n           )\n           }}\n    )\n\n/* Creating necessary columns to use in PowerBI. */\n, date_columns as (\n    select distinct\n        date(date_day) as metric_date\n\t    , extract(day from date_day) as day\n        , extract(month from date_day) as month\n        , extract(year from date_day) as year\n        , extract(quarter from date_day) as quarter\n    from date_series\n)\n\n, month_columns as (\n    select\n    \t*\n\t\t, case\n            when month = 1 then 'Jan'\n            when month = 2 then 'Fev'\n            when month = 3 then 'Mar'\n            when month = 4 then 'Abr'\n            when month = 5 then 'Mai'\n            when month = 6 then 'Jun'\n            when month = 7 then 'Jul'\n            when month = 8 then 'Ago'\n            when month = 9 then 'Set'\n            when month = 10 then 'Out'\n            when month = 11 then 'Nov'\n            when month = 12 then 'Dez'\n        end as fullmonth\n    from date_columns\n)\n\nselect *\nfrom month_columns", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": null}, "model.desafioaethaina.dim_products": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_products", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_products.sql", "original_file_path": "models/gold/dim_products.sql", "unique_id": "model.desafioaethaina.dim_products", "fqn": ["desafioaethaina", "gold", "dim_products"], "alias": "dim_products", "checksum": {"name": "sha256", "checksum": "72b9456d5344c397265ec20c6a680cc7ecf1d53b855ab3c93b2ff1caf049b0ea"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about products of Adventure Works", "columns": {"product_sk": {"name": "product_sk", "description": "Single promo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_name": {"name": "category_name", "description": "Category name of product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subcategory_name": {"name": "subcategory_name", "description": "Subcategory name of product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "Name of product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_number": {"name": "product_number", "description": "Number of product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "makeflag": {"name": "makeflag", "description": "0 = Product is purchased, 1 = Product is manufactured in-house..", "meta": {}, "data_type": null, "quote": null, "tags": []}, "finished_goods_flag": {"name": "finished_goods_flag", "description": "0 = Product is not a salable item. 1 = Product is salable..", "meta": {}, "data_type": null, "quote": null, "tags": []}, "color": {"name": "color", "description": "Full name of the month of the year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "safety_stock_level": {"name": "safety_stock_level", "description": "Product color.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stand_cost": {"name": "stand_cost", "description": "Standard cost of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "size_product": {"name": "size_product", "description": "Product size.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "style_product": {"name": "style_product", "description": "W = Women, M = Men, U = Universal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weight_product": {"name": "weight_product", "description": "Product weight.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_name": {"name": "model_name", "description": "Product model description.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_products.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.9722474, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_products`", "raw_code": "with int_product as (\n    select *\n    from {{ ref('int_product') }}\n    where product_id is not null\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by product_id order by product_id) as dedup_index\n    from int_product\n)\n\n, prodcut_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['product_id']) }} as product_sk\n        , category_name\n        , subcategory_name\n        , product_name\n        , product_number\n        , makeflag\n        , finished_goods_flag\n        , color\n        , safety_stock_level\n        , stand_cost\n        , size_product\n        , style_product\n        , weight_product\n        , model_name\n      from deduplication_data\n    where dedup_index = 1  \n)\n\nselect *\nfrom prodcut_with_sk", "language": "sql", "refs": [["int_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_product", "model.desafioaethaina.int_product"]}, "compiled_path": null}, "model.desafioaethaina.dim_customers": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_customers", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_customers.sql", "original_file_path": "models/gold/dim_customers.sql", "unique_id": "model.desafioaethaina.dim_customers", "fqn": ["desafioaethaina", "gold", "dim_customers"], "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "7abf8c747dc2f3402c535b522440b9d2e8c8f536f985ba5d53d9a169d6980384"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about customers of Adventure Works", "columns": {"customer_sk": {"name": "customer_sk", "description": "Single customer record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_name": {"name": "full_name", "description": "Full name of customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territory_id": {"name": "territory_id", "description": "Territory ID of customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_type": {"name": "person_type", "description": "Type of customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "courtesy_title": {"name": "courtesy_title", "description": "Courtesy title of customer. It can be null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_promotion": {"name": "email_promotion", "description": "If customers wants to receive an email promotion. 0 = don't / 1 = wants / 2 = wants from partners too", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_customers.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.93847, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_customers`", "raw_code": "with int_person as (\n    select * \n    from {{ ref('int_person') }}\n    where customer_id is not null\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by customer_id order by customer_id) as dedup_index\n    from int_person\n)\n\n, customer_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['customer_id']) }} as customer_sk\n        , full_name \n\t\t, territory_id \n        , person_type\n\t\t, courtesy_title\n        , email_promotion\n    from deduplication_data\n    where dedup_index = 1\n)\n\nselect *\nfrom customer_with_sk", "language": "sql", "refs": [["int_person"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_person", "model.desafioaethaina.int_person"]}, "compiled_path": null}, "model.desafioaethaina.dim_address": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_address", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_address.sql", "original_file_path": "models/gold/dim_address.sql", "unique_id": "model.desafioaethaina.dim_address", "fqn": ["desafioaethaina", "gold", "dim_address"], "alias": "dim_address", "checksum": {"name": "sha256", "checksum": "aad1cd368ebf974c6b906db9c97fa3ca493a421826e1bce5f77df3bd564161cd"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about address of workers and clients of Adventure Works", "columns": {"address_sk": {"name": "address_sk", "description": "Single address record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_entity_id": {"name": "business_entity_id", "description": "Id of address type. It can be ID of worker or customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_type_id": {"name": "address_type_id", "description": "Id of address type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_type_name": {"name": "address_type_name", "description": "Address type description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker": {"name": "worker", "description": "ID of worker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_type_id": {"name": "contact_type_id", "description": "ID of contact type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_type_name_worker": {"name": "contact_type_name_worker", "description": "Type of contact of worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Full address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "Name of the city.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_province_id": {"name": "state_province_id", "description": "Id of state province", "meta": {}, "data_type": null, "quote": null, "tags": []}, "worker_id": {"name": "worker_id", "description": "Id of worker", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_province_code": {"name": "state_province_code", "description": "ISO standard state or province code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country_region_code": {"name": "country_region_code", "description": "ISO standard country or region code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_province_description": {"name": "name_province_description", "description": "State or province description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state_province_name": {"name": "state_province_name", "description": "State or province description", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territory_id": {"name": "territory_id", "description": "ID of the territory in which the state or province is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_territory_description": {"name": "name_territory_description", "description": "Name of the territory in which the state or province is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_address.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.8280106, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_address`", "raw_code": "with int_address as (\n    select *\n    from {{ ref('int_address') }}\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by address_id order by address_id) as dedup_index\n    from int_address\n)\n\n, address_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['address_id']) }} as address_sk\n        , business_entity_id\n        , address_type_id\n        , address_type_name\n        , worker_id\n        , contact_type_id\n        , contact_type_name_worker\n        , address\n        , city\n        , state_province_id\n        , state_province_code\n        , country_region_code\n        , name_province_description\n        , state_province_name\n        , territory_id\n        , name_territory_description\n      from deduplication_data\n    where dedup_index = 1\n)\n\nselect *\nfrom address_with_sk", "language": "sql", "refs": [["int_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_address", "model.desafioaethaina.int_address"]}, "compiled_path": null}, "model.desafioaethaina.dim_territories": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_territories", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_territories.sql", "original_file_path": "models/gold/dim_territories.sql", "unique_id": "model.desafioaethaina.dim_territories", "fqn": ["desafioaethaina", "gold", "dim_territories"], "alias": "dim_territories", "checksum": {"name": "sha256", "checksum": "30cd9304c8c618d2da3a8c0d7f58b47640e3f672a3c33b585f32799447ff7e0b"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about address of workers and clients of Adventure Works", "columns": {"territory_sk": {"name": "territory_sk", "description": "Single territory record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_territory_description": {"name": "name_territory_description", "description": "Sales territory description", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_territories.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.7617056, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_territories`", "raw_code": "with int_address as (\n    select *\n    from {{ ref('int_address') }}\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by territory_id order by territory_id) as dedup_index\n    from int_address\n)\n\n, territory_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['territory_id']) }} as territory_sk\n        , name_territory_description\n      from deduplication_data\n    where dedup_index = 1\n)\n\nselect *\nfrom territory_with_sk", "language": "sql", "refs": [["int_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_address", "model.desafioaethaina.int_address"]}, "compiled_path": null}, "model.desafioaethaina.dim_reasons": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_reasons", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_reasons.sql", "original_file_path": "models/gold/dim_reasons.sql", "unique_id": "model.desafioaethaina.dim_reasons", "fqn": ["desafioaethaina", "gold", "dim_reasons"], "alias": "dim_reasons", "checksum": {"name": "sha256", "checksum": "717fb214b547281f51f47ee37ab9ade842fbf2f5535562d1bed940fe2e9afc65"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about the reason of the order from Adventure Works", "columns": {"reason_type_sk": {"name": "reason_type_sk", "description": "Single reason record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_type": {"name": "reason_type", "description": "Type of the sales reason.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_reasons.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.9098294, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_reasons`", "raw_code": "with int_sales as (\n    select *\n    from {{ ref('int_reason') }}\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by reason_type order by reason_type) as dedup_index\n    from int_sales\n)\n\n, reason_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['reason_type']) }} as reason_type_sk\n        , reason_type\n      from deduplication_data\n    where dedup_index = 1\n)\n\nselect *\nfrom reason_with_sk", "language": "sql", "refs": [["int_reason"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_reason", "model.desafioaethaina.int_reason"]}, "compiled_path": null}, "model.desafioaethaina.int_sales": {"database": "desafiothaina", "schema": "dev_thaina_intermediate", "name": "int_sales", "resource_type": "model", "package_name": "desafioaethaina", "path": "intermediate/int_sales.sql", "original_file_path": "models/intermediate/int_sales.sql", "unique_id": "model.desafioaethaina.int_sales", "fqn": ["desafioaethaina", "intermediate", "int_sales"], "alias": "int_sales", "checksum": {"name": "sha256", "checksum": "659cf7faa3589dde417293b5bde169f18685a1be00f03ca8ab3b2ed0ae003e99"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "intermediate"}, "created_at": 1688499612.9040654, "relation_name": null, "raw_code": "with order_header as (\n\tselect * \n\tfrom {{ ref('stg_sales_order_header') }}\t\n)\n\n, order_header_reason as (\n\tselect * \n\tfrom {{ ref('stg_sales_order_header_reason') }}\t\n)\n\n, order_detail as (\n\tselect * \n\tfrom {{ ref('stg_sales_order_detail') }}\t\n)\n\n, credit_card as (\n\tselect * \n\tfrom {{ ref('stg_sales_creditcard') }}\t\n)\n\n, reason as (\n\tselect *\n\tfrom {{ ref('int_reason') }}\n)\n\n, union_credit_card as (\n\tselect \n\t\torder_header.*\n\t\t, card_type\n\tfrom order_header \n\tleft join credit_card\n\t\ton credit_card.credit_card_id = order_header.credit_card_id\n)\n\n, union_header_detail as (\n\tselect \n\t\tunion_credit_card.*\n\t\t, sales_order_detail_id\n\t\t, carrier_tracking_number\n\t\t, product_id\n\t\t, order_qty\n\t\t, unit_price\n\t\t, case \n\t\t\twhen unit_price_discount != 0\n\t\t\t\tthen unit_price_discount\n\t\t\telse null\n\t\tend as unit_price_discount\n\t\t, ((1 - COALESCE(unit_price_discount,0)) * unit_price * order_qty) as sub_total_fixed\n\tfrom order_detail \n\tleft join union_credit_card\n\t\ton union_credit_card.sales_order_id =  order_detail.sales_order_id\n)\n\n, count_orders as (\n\tselect \n\t\tsales_order_id\n\t\t, count(sales_order_id) as count_orders_rows\n\t\tfrom union_header_detail\n\t\tgroup by sales_order_id\n)\n\n,  join_fixing_columns as (\n\tselect\n\t\tunion_header_detail.*\n\t\t, count_orders_rows\n \t\t, freight / count_orders_rows as freight_fixed\n\t\t, tax_amount / count_orders_rows as tax_fixed\n\t\tfrom union_header_detail\n\t\tleft join count_orders\n\t\t\ton count_orders.sales_order_id  = union_header_detail.sales_order_id\n)\n\n, fixed_table as (\n\tselect \n\t\tsales_order_id\n\t\t, sales_order_detail_id\n\t\t, customer_id\n\t\t, order_date\n\t\t, due_date\n\t\t, ship_date\n\t\t, case \n\t\t\twhen purchase_order_number is not null\n\t\t\t\tthen \"No\"\n\t\t\telse \"Yes\"\n\t\tend as online_order\n\t\t, sales_person_id\n\t\t, territory_id\n\t\t, bill_to_address_id\n\t\t, ship_to_address_id\n\t\t, ship_method_id\n\t\t-- , credit_card_id\n\t\t, case \n\t\t\twhen credit_card_approval_code is not null\n\t\t\t\tthen \"No\"\n\t\t\telse \"Yes\"\n\t\tend as paid_with_credit_card\n\t\t, card_type\n\t\t, status\n\t\t, carrier_tracking_number\n\t\t, product_id\n\t\t, order_qty\n\t\t, unit_price\n\t\t, unit_price_discount\n\t\t, sub_total_fixed\n\t\t, freight_fixed\n\t\t, tax_fixed\n\t\t, sub_total_fixed + freight_fixed + tax_fixed as total_due_fixed\n\tfrom join_fixing_columns\n)\n\n, union_reason as (\n\tselect\n\t\tfixed_table.*\n\t\t, reason_type\n\t\tfrom fixed_table\n\t\tleft join reason\n\t\t\ton reason.sales_order_id = fixed_table.sales_order_id\n)\n\nselect * \nfrom union_reason", "language": "sql", "refs": [["stg_sales_order_header"], ["stg_sales_order_header_reason"], ["stg_sales_order_detail"], ["stg_sales_creditcard"], ["int_reason"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaethaina.stg_sales_order_header", "model.desafioaethaina.stg_sales_order_header_reason", "model.desafioaethaina.stg_sales_order_detail", "model.desafioaethaina.stg_sales_creditcard", "model.desafioaethaina.int_reason"]}, "compiled_path": null}, "model.desafioaethaina.dim_cards_type": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "dim_cards_type", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/dim_cards_type.sql", "original_file_path": "models/gold/dim_cards_type.sql", "unique_id": "model.desafioaethaina.dim_cards_type", "fqn": ["desafioaethaina", "gold", "dim_cards_type"], "alias": "dim_cards_type", "checksum": {"name": "sha256", "checksum": "5e932c1689ba8abd39cc0a16438cbd2980c9d073bf41c38e848207e6b9f2fb10"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table contains information about customers of Adventure Works", "columns": {"credit_card_sk": {"name": "credit_card_sk", "description": "Single credit card record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_type": {"name": "card_type", "description": "Credit card name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/dim_cards_type.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688501175.8807309, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`dim_cards_type`", "raw_code": "with int_sales as (\n\tselect * \n    from {{ ref('int_sales') }}\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by card_type order by card_type) as dedup_index\n    from int_sales\n)\n\n, credit_card_with_sk  as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['card_type']) }} as credit_card_sk\n        , card_type\n      from deduplication_data\n    where dedup_index = 1\n)\n \nselect *\nfrom credit_card_with_sk", "language": "sql", "refs": [["int_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_sales", "model.desafioaethaina.int_sales"]}, "compiled_path": null}, "model.desafioaethaina.int_reason": {"database": "desafiothaina", "schema": "dev_thaina_intermediate", "name": "int_reason", "resource_type": "model", "package_name": "desafioaethaina", "path": "intermediate/int_reason.sql", "original_file_path": "models/intermediate/int_reason.sql", "unique_id": "model.desafioaethaina.int_reason", "fqn": ["desafioaethaina", "intermediate", "int_reason"], "alias": "int_reason", "checksum": {"name": "sha256", "checksum": "e10299a3c5d381e148bd23fa9b6228f52e83f5b9b8d01c13bbf2ae9af3740eae"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "ephemeral", "schema": "intermediate"}, "created_at": 1688500126.1020699, "relation_name": null, "raw_code": "with order_header_reason as (\n\tselect * \n\tfrom {{ ref('stg_sales_order_header_reason') }}\t\n)\n\n, sales_reason as (\n\tselect * \n\tfrom {{ ref('stg_sales_reason') }}\t\n)\n\n, union_reason as ( \n\tselect\n\t\tsales_order_id\n\t\t, sales_reason.*\n\t\tfrom order_header_reason\n\t\tleft join sales_reason\n\t\t\ton sales_reason.sales_reason_id = order_header_reason.sales_reason_id\n\t\torder by reason_type DESC\n)\n\n, aggregate_columns as (\n\tselect\n\t\tsales_order_id\n\t\t, string_agg(reason_type, ', ') agg_reason_type\n\t\t, string_agg(name_reason , ', ') as agg_name_reason\n\tfrom union_reason\n\tgroup by sales_order_id\n)\n\n, replace_aggregate as (\n\tselect \n\t\tsales_order_id\n\t\t, replace(replace(agg_reason_type,'Other, Other', 'Other'), 'Promotion, Other', 'Other, Promotion') as reason_type\n\t\t, replace(agg_name_reason,'Other, Other', 'Other') as name_reason\n\tfrom aggregate_columns\n\tunion all\n\tselect\n\t\tnull as sales_order_id\n\t\t, null as reason_type\n\t\t, null as name_reason\n)\nselect *\nfrom replace_aggregate", "language": "sql", "refs": [["stg_sales_order_header_reason"], ["stg_sales_reason"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaethaina.stg_sales_order_header_reason", "model.desafioaethaina.stg_sales_reason"]}, "compiled_path": null}, "model.desafioaethaina.fact_sales": {"database": "desafiothaina", "schema": "dev_thaina_gold", "name": "fact_sales", "resource_type": "model", "package_name": "desafioaethaina", "path": "gold/fact_sales.sql", "original_file_path": "models/gold/fact_sales.sql", "unique_id": "model.desafioaethaina.fact_sales", "fqn": ["desafioaethaina", "gold", "fact_sales"], "alias": "fact_sales", "checksum": {"name": "sha256", "checksum": "130b08d320d52c9f88d8880783145ec0b1682599e7ca4a7c64a1e947f7ba18f0"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact table containing sales information.", "columns": {"sale_identifier_sk": {"name": "sale_identifier_sk", "description": "Unique identifier for each row on the fact table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_fk": {"name": "customer_fk", "description": "Customer identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territory_fk": {"name": "territory_fk", "description": "Territory foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_address_fk": {"name": "bill_to_address_fk", "description": "Bill to address foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_to_address_fk": {"name": "ship_to_address_fk", "description": "Ship to address foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_fk": {"name": "product_fk", "description": "Product foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_fk": {"name": "credit_card_fk", "description": "Credit card foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_type_fk": {"name": "reason_type_fk", "description": "Type of sales reason foreign key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "Date of sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date of due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "Date of ship.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "online_order": {"name": "online_order", "description": "If the sale was online or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_tracking_number": {"name": "carrier_tracking_number", "description": "Shipment tracking number supplied by the shipper.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_with_credit_card": {"name": "paid_with_credit_card", "description": "If the sale was paid with a credit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Status": {"name": "Status", "description": "Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 =Complete", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_qty": {"name": "order_qty", "description": "Quantity for each product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price of product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price_discount": {"name": "unit_price_discount", "description": "Discount for unit price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_total_fixed": {"name": "sub_total_fixed", "description": "Subtotal proportional of order_detail_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount_fixed": {"name": "tax_amount_fixed", "description": "Tax amount proportional of order_detail_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freight_fixed": {"name": "freight_fixed", "description": "Freight proportional of order_detail_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_due_fixed": {"name": "total_due_fixed", "description": "Total due proportional of order_detail_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaethaina://models/gold/fact_sales.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "file_format": "delta", "materialized": "table", "schema": "gold"}, "created_at": 1688500687.047993, "relation_name": "`desafiothaina`.`dev_thaina_gold`.`fact_sales`", "raw_code": "with int_sales as (\n    select * \n    from {{ ref('int_sales') }}\n)\n\n, deduplication_data as (\n    select\n        *\n        , row_number() over (partition by sales_order_id, sales_order_detail_id order by sales_order_id) as dedup_index\n    from int_sales\n)\n\n, sales_with_sk  as (\n    select\n        row_number() over (order by sales_order_id, sales_order_detail_id) as sale_identifier_sk\n        , {{ dbt_utils.generate_surrogate_key(['customer_id']) }} as customer_fk\n        , {{ dbt_utils.generate_surrogate_key(['territory_id']) }} as territory_fk\n        , {{ dbt_utils.generate_surrogate_key(['bill_to_address_id']) }} as bill_to_address_fk\n        , {{ dbt_utils.generate_surrogate_key(['ship_to_address_id']) }} as ship_to_address_fk\n        , {{ dbt_utils.generate_surrogate_key(['ship_method_id']) }} as ship_method_fk\n        , {{ dbt_utils.generate_surrogate_key(['product_id']) }} as product_fk\n        , {{ dbt_utils.generate_surrogate_key(['card_type']) }} as credit_card_fk\n        , {{ dbt_utils.generate_surrogate_key(['reason_type']) }} as reason_type_fk\n        , order_date\n        , due_date\n        , ship_date\n        , online_order\n        , carrier_tracking_number\n        , paid_with_credit_card\n        , status\n        , order_qty\n        , unit_price\n        , unit_price_discount\n        , sub_total_fixed\n\t\t, freight_fixed\n\t\t, tax_fixed\n        , total_due_fixed\n    from deduplication_data\n    where dedup_index = 1\n)\n\nselect *\nfrom sales_with_sk", "language": "sql", "refs": [["int_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaethaina.int_sales"]}, "compiled_path": null}, "test.desafioaethaina.not_null_fact_sales_sale_identifier_sk.f1e7cc502e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sale_identifier_sk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_fact_sales_sale_identifier_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_fact_sales_sale_identifier_sk.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.not_null_fact_sales_sale_identifier_sk.f1e7cc502e", "fqn": ["desafioaethaina", "gold", "not_null_fact_sales_sale_identifier_sk"], "alias": "not_null_fact_sales_sale_identifier_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688500687.087246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "sale_identifier_sk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.unique_fact_sales_sale_identifier_sk.28d5892d06": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sale_identifier_sk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_fact_sales_sale_identifier_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_fact_sales_sale_identifier_sk.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.unique_fact_sales_sale_identifier_sk.28d5892d06", "fqn": ["desafioaethaina", "gold", "unique_fact_sales_sale_identifier_sk"], "alias": "unique_fact_sales_sale_identifier_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688500687.0948873, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "sale_identifier_sk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_sk", "column_name": "customer_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_ca21a0796b5f0d6f13bfb8d3a380b879.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_"], "alias": "relationships_fact_sales_ca21a0796b5f0d6f13bfb8d3a380b879", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_ca21a0796b5f0d6f13bfb8d3a380b879", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_ca21a0796b5f0d6f13bfb8d3a380b879"}, "created_at": 1688500687.1023688, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_ca21a0796b5f0d6f13bfb8d3a380b879\") }}", "language": "sql", "refs": [["dim_customers"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_customers", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "customer_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_territories')", "field": "territory_sk", "column_name": "territory_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_c61c3ea58f1cf579ba140860626303ce.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_"], "alias": "relationships_fact_sales_c61c3ea58f1cf579ba140860626303ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_c61c3ea58f1cf579ba140860626303ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_c61c3ea58f1cf579ba140860626303ce"}, "created_at": 1688500687.1356797, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_c61c3ea58f1cf579ba140860626303ce\") }}", "language": "sql", "refs": [["dim_territories"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_territories", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "territory_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_address')", "field": "address_sk", "column_name": "bill_to_address_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_36fff18dab35cf3160058ef23ca0ea12.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_"], "alias": "relationships_fact_sales_36fff18dab35cf3160058ef23ca0ea12", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_36fff18dab35cf3160058ef23ca0ea12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_36fff18dab35cf3160058ef23ca0ea12"}, "created_at": 1688500687.150004, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_36fff18dab35cf3160058ef23ca0ea12\") }}", "language": "sql", "refs": [["dim_address"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_address", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "bill_to_address_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_address')", "field": "address_sk", "column_name": "ship_to_address_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_f5f5f207851657819f170df62952f91c.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_"], "alias": "relationships_fact_sales_f5f5f207851657819f170df62952f91c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_f5f5f207851657819f170df62952f91c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_f5f5f207851657819f170df62952f91c"}, "created_at": 1688500687.164053, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_f5f5f207851657819f170df62952f91c\") }}", "language": "sql", "refs": [["dim_address"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_address", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "ship_to_address_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_products')", "field": "product_sk", "column_name": "product_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_product_fk__product_sk__ref_dim_products_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_f765900a1937b39c2370e1a1d08c08f5.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_product_fk__product_sk__ref_dim_products_"], "alias": "relationships_fact_sales_f765900a1937b39c2370e1a1d08c08f5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_f765900a1937b39c2370e1a1d08c08f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_f765900a1937b39c2370e1a1d08c08f5"}, "created_at": 1688500687.1815932, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_f765900a1937b39c2370e1a1d08c08f5\") }}", "language": "sql", "refs": [["dim_products"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_products", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "product_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_cards_type')", "field": "credit_card_sk", "column_name": "credit_card_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_68705f0349c751179d724ab0570f9389.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_"], "alias": "relationships_fact_sales_68705f0349c751179d724ab0570f9389", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_68705f0349c751179d724ab0570f9389", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_68705f0349c751179d724ab0570f9389"}, "created_at": 1688500687.1999967, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_68705f0349c751179d724ab0570f9389\") }}", "language": "sql", "refs": [["dim_cards_type"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_cards_type", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "credit_card_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_reasons')", "field": "reason_type_sk", "column_name": "reason_type_fk", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_d5a2ed49ede963bfcfe855dfe821701f.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_"], "alias": "relationships_fact_sales_d5a2ed49ede963bfcfe855dfe821701f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_d5a2ed49ede963bfcfe855dfe821701f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_d5a2ed49ede963bfcfe855dfe821701f"}, "created_at": 1688500687.215357, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_d5a2ed49ede963bfcfe855dfe821701f\") }}", "language": "sql", "refs": [["dim_reasons"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_reasons", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "reason_type_fk", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_dates')", "field": "metric_date", "column_name": "order_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_order_date__metric_date__ref_dim_dates_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_33dc30e2eee189b676598f310f1620da.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_order_date__metric_date__ref_dim_dates_"], "alias": "relationships_fact_sales_33dc30e2eee189b676598f310f1620da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_33dc30e2eee189b676598f310f1620da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_sales_33dc30e2eee189b676598f310f1620da"}, "created_at": 1688500687.2290974, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_33dc30e2eee189b676598f310f1620da\") }}", "language": "sql", "refs": [["dim_dates"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "order_date", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_dates')", "field": "metric_date", "column_name": "due_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_due_date__metric_date__ref_dim_dates_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_due_date__metric_date__ref_dim_dates_.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_due_date__metric_date__ref_dim_dates_"], "alias": "relationships_fact_sales_due_date__metric_date__ref_dim_dates_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688500687.246267, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_dates"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "due_date", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_dates')", "field": "metric_date", "column_name": "ship_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "relationships_fact_sales_ship_date__metric_date__ref_dim_dates_", "resource_type": "test", "package_name": "desafioaethaina", "path": "relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.sql", "original_file_path": "models/gold/fact_sales.yml", "unique_id": "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f", "fqn": ["desafioaethaina", "gold", "relationships_fact_sales_ship_date__metric_date__ref_dim_dates_"], "alias": "relationships_fact_sales_ship_date__metric_date__ref_dim_dates_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688500687.2630062, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_dates"], ["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"]}, "compiled_path": null, "column_name": "ship_date", "file_key_name": "models.fact_sales"}, "test.desafioaethaina.not_null_dim_territories_territory_sk.63a10e9994": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "territory_sk", "model": "{{ get_where_subquery(ref('dim_territories')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_territories_territory_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_territories_territory_sk.sql", "original_file_path": "models/gold/dim_territories.yml", "unique_id": "test.desafioaethaina.not_null_dim_territories_territory_sk.63a10e9994", "fqn": ["desafioaethaina", "gold", "not_null_dim_territories_territory_sk"], "alias": "not_null_dim_territories_territory_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.7890284, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_territories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_territories"]}, "compiled_path": null, "column_name": "territory_sk", "file_key_name": "models.dim_territories"}, "test.desafioaethaina.unique_dim_territories_territory_sk.c33c73c3d3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "territory_sk", "model": "{{ get_where_subquery(ref('dim_territories')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_territories_territory_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_territories_territory_sk.sql", "original_file_path": "models/gold/dim_territories.yml", "unique_id": "test.desafioaethaina.unique_dim_territories_territory_sk.c33c73c3d3", "fqn": ["desafioaethaina", "gold", "unique_dim_territories_territory_sk"], "alias": "unique_dim_territories_territory_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.7987058, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_territories"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_territories"]}, "compiled_path": null, "column_name": "territory_sk", "file_key_name": "models.dim_territories"}, "test.desafioaethaina.not_null_dim_address_address_sk.6b4bcead40": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_sk", "model": "{{ get_where_subquery(ref('dim_address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_address_address_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_address_address_sk.sql", "original_file_path": "models/gold/dim_address.yml", "unique_id": "test.desafioaethaina.not_null_dim_address_address_sk.6b4bcead40", "fqn": ["desafioaethaina", "gold", "not_null_dim_address_address_sk"], "alias": "not_null_dim_address_address_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8315754, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_address"]}, "compiled_path": null, "column_name": "address_sk", "file_key_name": "models.dim_address"}, "test.desafioaethaina.unique_dim_address_address_sk.d3ee9ce728": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "address_sk", "model": "{{ get_where_subquery(ref('dim_address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_address_address_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_address_address_sk.sql", "original_file_path": "models/gold/dim_address.yml", "unique_id": "test.desafioaethaina.unique_dim_address_address_sk.d3ee9ce728", "fqn": ["desafioaethaina", "gold", "unique_dim_address_address_sk"], "alias": "unique_dim_address_address_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8401308, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_address"]}, "compiled_path": null, "column_name": "address_sk", "file_key_name": "models.dim_address"}, "test.desafioaethaina.not_null_dim_address_business_entity_id.1b9faed002": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "business_entity_id", "model": "{{ get_where_subquery(ref('dim_address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_address_business_entity_id", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_address_business_entity_id.sql", "original_file_path": "models/gold/dim_address.yml", "unique_id": "test.desafioaethaina.not_null_dim_address_business_entity_id.1b9faed002", "fqn": ["desafioaethaina", "gold", "not_null_dim_address_business_entity_id"], "alias": "not_null_dim_address_business_entity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8510911, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_address"]}, "compiled_path": null, "column_name": "business_entity_id", "file_key_name": "models.dim_address"}, "test.desafioaethaina.not_null_dim_address_address_type_id.5adabc5e26": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_id", "model": "{{ get_where_subquery(ref('dim_address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_address_address_type_id", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_address_address_type_id.sql", "original_file_path": "models/gold/dim_address.yml", "unique_id": "test.desafioaethaina.not_null_dim_address_address_type_id.5adabc5e26", "fqn": ["desafioaethaina", "gold", "not_null_dim_address_address_type_id"], "alias": "not_null_dim_address_address_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8610365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_address"]}, "compiled_path": null, "column_name": "address_type_id", "file_key_name": "models.dim_address"}, "test.desafioaethaina.not_null_dim_address_address_type_name.c30bd4a13b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_name", "model": "{{ get_where_subquery(ref('dim_address')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_address_address_type_name", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_address_address_type_name.sql", "original_file_path": "models/gold/dim_address.yml", "unique_id": "test.desafioaethaina.not_null_dim_address_address_type_name.c30bd4a13b", "fqn": ["desafioaethaina", "gold", "not_null_dim_address_address_type_name"], "alias": "not_null_dim_address_address_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8702576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_address"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_address"]}, "compiled_path": null, "column_name": "address_type_name", "file_key_name": "models.dim_address"}, "test.desafioaethaina.not_null_dim_cards_type_credit_card_sk.44ff8f59e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_card_sk", "model": "{{ get_where_subquery(ref('dim_cards_type')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_cards_type_credit_card_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_cards_type_credit_card_sk.sql", "original_file_path": "models/gold/dim_cards_type.yml", "unique_id": "test.desafioaethaina.not_null_dim_cards_type_credit_card_sk.44ff8f59e0", "fqn": ["desafioaethaina", "gold", "not_null_dim_cards_type_credit_card_sk"], "alias": "not_null_dim_cards_type_credit_card_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.888722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_cards_type"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_cards_type"]}, "compiled_path": null, "column_name": "credit_card_sk", "file_key_name": "models.dim_cards_type"}, "test.desafioaethaina.unique_dim_cards_type_credit_card_sk.2715e2829d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_card_sk", "model": "{{ get_where_subquery(ref('dim_cards_type')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_cards_type_credit_card_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_cards_type_credit_card_sk.sql", "original_file_path": "models/gold/dim_cards_type.yml", "unique_id": "test.desafioaethaina.unique_dim_cards_type_credit_card_sk.2715e2829d", "fqn": ["desafioaethaina", "gold", "unique_dim_cards_type_credit_card_sk"], "alias": "unique_dim_cards_type_credit_card_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.8991601, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_cards_type"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_cards_type"]}, "compiled_path": null, "column_name": "credit_card_sk", "file_key_name": "models.dim_cards_type"}, "test.desafioaethaina.not_null_dim_reasons_reason_type_sk.cefab8368d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason_type_sk", "model": "{{ get_where_subquery(ref('dim_reasons')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_reasons_reason_type_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_reasons_reason_type_sk.sql", "original_file_path": "models/gold/dim_reasons.yml", "unique_id": "test.desafioaethaina.not_null_dim_reasons_reason_type_sk.cefab8368d", "fqn": ["desafioaethaina", "gold", "not_null_dim_reasons_reason_type_sk"], "alias": "not_null_dim_reasons_reason_type_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.913671, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_reasons"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_reasons"]}, "compiled_path": null, "column_name": "reason_type_sk", "file_key_name": "models.dim_reasons"}, "test.desafioaethaina.unique_dim_reasons_reason_type_sk.3d6112e120": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "reason_type_sk", "model": "{{ get_where_subquery(ref('dim_reasons')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_reasons_reason_type_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_reasons_reason_type_sk.sql", "original_file_path": "models/gold/dim_reasons.yml", "unique_id": "test.desafioaethaina.unique_dim_reasons_reason_type_sk.3d6112e120", "fqn": ["desafioaethaina", "gold", "unique_dim_reasons_reason_type_sk"], "alias": "unique_dim_reasons_reason_type_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.9229941, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_reasons"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_reasons"]}, "compiled_path": null, "column_name": "reason_type_sk", "file_key_name": "models.dim_reasons"}, "test.desafioaethaina.not_null_dim_customers_customer_sk.8ae5836863": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_sk", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_customers_customer_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_customers_customer_sk.sql", "original_file_path": "models/gold/dim_customers.yml", "unique_id": "test.desafioaethaina.not_null_dim_customers_customer_sk.8ae5836863", "fqn": ["desafioaethaina", "gold", "not_null_dim_customers_customer_sk"], "alias": "not_null_dim_customers_customer_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.9429421, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_customers"]}, "compiled_path": null, "column_name": "customer_sk", "file_key_name": "models.dim_customers"}, "test.desafioaethaina.unique_dim_customers_customer_sk.22a014df62": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_sk", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_customers_customer_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_customers_customer_sk.sql", "original_file_path": "models/gold/dim_customers.yml", "unique_id": "test.desafioaethaina.unique_dim_customers_customer_sk.22a014df62", "fqn": ["desafioaethaina", "gold", "unique_dim_customers_customer_sk"], "alias": "unique_dim_customers_customer_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.9515731, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customers"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_customers"]}, "compiled_path": null, "column_name": "customer_sk", "file_key_name": "models.dim_customers"}, "test.desafioaethaina.not_null_dim_products_product_sk.2a2df3e1b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_sk", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "not_null_dim_products_product_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "not_null_dim_products_product_sk.sql", "original_file_path": "models/gold/dim_products.yml", "unique_id": "test.desafioaethaina.not_null_dim_products_product_sk.2a2df3e1b9", "fqn": ["desafioaethaina", "gold", "not_null_dim_products_product_sk"], "alias": "not_null_dim_products_product_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.9764464, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaethaina.dim_products"]}, "compiled_path": null, "column_name": "product_sk", "file_key_name": "models.dim_products"}, "test.desafioaethaina.unique_dim_products_product_sk.8f20ac7c5b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_sk", "model": "{{ get_where_subquery(ref('dim_products')) }}"}, "namespace": null}, "database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "unique_dim_products_product_sk", "resource_type": "test", "package_name": "desafioaethaina", "path": "unique_dim_products_product_sk.sql", "original_file_path": "models/gold/dim_products.yml", "unique_id": "test.desafioaethaina.unique_dim_products_product_sk.8f20ac7c5b", "fqn": ["desafioaethaina", "gold", "unique_dim_products_product_sk"], "alias": "unique_dim_products_product_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688501175.9874496, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaethaina.dim_products"]}, "compiled_path": null, "column_name": "product_sk", "file_key_name": "models.dim_products"}, "test.desafioaethaina.check_2011_sales": {"database": "desafiothaina", "schema": "dev_thaina_dbt_test__audit", "name": "check_2011_sales", "resource_type": "test", "package_name": "desafioaethaina", "path": "check_2011_sales.sql", "original_file_path": "tests/check_2011_sales.sql", "unique_id": "test.desafioaethaina.check_2011_sales", "fqn": ["desafioaethaina", "check_2011_sales"], "alias": "check_2011_sales", "checksum": {"name": "sha256", "checksum": "56b615e900a152f2b7fd9f00fd3ebfe2e73cb5a501cd7362f4115f2e3a463f76"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "severety": "error"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/desafioaethaina/tests/check_2011_sales.sql", "deferred": false, "unrendered_config": {"severety": "error"}, "created_at": 1688501584.0082645, "relation_name": null, "raw_code": "{{\n    config(\n        severety = 'error'\n    )\n}}\n\nwith sales as (\n    select \n        sum(sub_total_fixed) as total_sales\n    from {{ ref('fact_sales') }} \n    where order_date between '2011-01-01' and '2011-12-31'\n)\n\nselect \n    total_sales\nfrom sales\nwhere total_sales not between 12646000.00 and 12647000.00", "language": "sql", "refs": [["fact_sales"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.desafioaethaina.fact_sales"]}, "compiled_path": "target/compiled/desafioaethaina/tests/check_2011_sales.sql", "compiled": true, "compiled_code": "\n\nwith sales as (\n    select \n        sum(sub_total_fixed) as total_sales\n    from `desafiothaina`.`dev_thaina_gold`.`fact_sales` \n    where order_date between '2011-01-01' and '2011-12-31'\n)\n\nselect \n    total_sales\nfrom sales\nwhere total_sales not between 12646000.00 and 12647000.00", "extra_ctes_injected": true, "extra_ctes": []}}, "sources": {"source.desafioaethaina.source_dw.product": {"database": "desafiothaina", "schema": "dev_thaina", "name": "product", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/products/sources_products.yml", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "source.desafioaethaina.source_dw.product", "fqn": ["desafioaethaina", "silver", "products", "source_dw", "product"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Products sold or used in the manfacturing of sold products.", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`product`", "created_at": 1688496929.279305}, "source.desafioaethaina.source_dw.location": {"database": "desafiothaina", "schema": "dev_thaina", "name": "location", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/products/sources_products.yml", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "source.desafioaethaina.source_dw.location", "fqn": ["desafioaethaina", "silver", "products", "source_dw", "location"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Product inventory and manufacturing locations.", "columns": {"locationid": {"name": "locationid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`location`", "created_at": 1688496929.2974093}, "source.desafioaethaina.source_dw.productcategory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productcategory", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/products/sources_products.yml", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "source.desafioaethaina.source_dw.productcategory", "fqn": ["desafioaethaina", "silver", "products", "source_dw", "productcategory"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "productcategory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "High-level product categorization.", "columns": {"productcategoryid": {"name": "productcategoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`productcategory`", "created_at": 1688496929.3147802}, "source.desafioaethaina.source_dw.productsubcategory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productsubcategory", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/products/sources_products.yml", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "source.desafioaethaina.source_dw.productsubcategory", "fqn": ["desafioaethaina", "silver", "products", "source_dw", "productsubcategory"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "productsubcategory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Product subcategories.", "columns": {"productsubcategoryid": {"name": "productsubcategoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productcategoryid": {"name": "productcategoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`productsubcategory`", "created_at": 1688496929.3332677}, "source.desafioaethaina.source_dw.productmodel": {"database": "desafiothaina", "schema": "dev_thaina", "name": "productmodel", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/products/sources_products.yml", "original_file_path": "models/silver/products/sources_products.yml", "unique_id": "source.desafioaethaina.source_dw.productmodel", "fqn": ["desafioaethaina", "silver", "products", "source_dw", "productmodel"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "productmodel", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Product model classification.", "columns": {"productmodelid": {"name": "productmodelid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`productmodel`", "created_at": 1688496929.3574152}, "source.desafioaethaina.source_dw.shipmethod": {"database": "desafiothaina", "schema": "dev_thaina", "name": "shipmethod", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/purchasing/sources_purchasing.yml", "original_file_path": "models/silver/purchasing/sources_purchasing.yml", "unique_id": "source.desafioaethaina.source_dw.shipmethod", "fqn": ["desafioaethaina", "silver", "purchasing", "source_dw", "shipmethod"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "shipmethod", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Shipping company lookup table.", "columns": {"shipmethodid": {"name": "shipmethodid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`shipmethod`", "created_at": 1688496929.36701}, "source.desafioaethaina.source_dw.customer": {"database": "desafiothaina", "schema": "dev_thaina", "name": "customer", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.customer", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "customer"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Current customer information. Also see the Person and Store tables.", "columns": {"customerid": {"name": "customerid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territoryid": {"name": "territoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`customer`", "created_at": 1688496929.3793905}, "source.desafioaethaina.source_dw.salesorderdetail": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderdetail", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesorderdetail", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesorderdetail"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesorderdetail", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Individual products associated with a specific sales order. See SalesOrderHeader.", "columns": {"salesorderdetailid": {"name": "salesorderdetailid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderdetail`", "created_at": 1688496929.3881264}, "source.desafioaethaina.source_dw.salesorderheader": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderheader", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesorderheader", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesorderheader"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesorderheader", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General sales order information.", "columns": {"salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderheader`", "created_at": 1688496929.395939}, "source.desafioaethaina.source_dw.salesorderheadersalesreason": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesorderheadersalesreason", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesorderheadersalesreason", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesorderheadersalesreason"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesorderheadersalesreason", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "General sales order information.", "columns": {"salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesorderheadersalesreason`", "created_at": 1688496929.4000654}, "source.desafioaethaina.source_dw.salesperson": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesperson", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesperson", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesperson"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesperson", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales representative current information.", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesperson`", "created_at": 1688496929.4078052}, "source.desafioaethaina.source_dw.salesreason": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesreason", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesreason", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesreason"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesreason", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales performance tracking.", "columns": {"salesreasonid": {"name": "salesreasonid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesreason`", "created_at": 1688496929.4131804}, "source.desafioaethaina.source_dw.salesterritory": {"database": "desafiothaina", "schema": "dev_thaina", "name": "salesterritory", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.salesterritory", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "salesterritory"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "salesterritory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Sales territory lookup table.", "columns": {"territoryid": {"name": "territoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`salesterritory`", "created_at": 1688496929.4173076}, "source.desafioaethaina.source_dw.creditcard": {"database": "desafiothaina", "schema": "dev_thaina", "name": "creditcard", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/sales/sources_sales.yml", "original_file_path": "models/silver/sales/sources_sales.yml", "unique_id": "source.desafioaethaina.source_dw.creditcard", "fqn": ["desafioaethaina", "silver", "sales", "source_dw", "creditcard"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "creditcard", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"creditcardid": {"name": "creditcardid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`creditcard`", "created_at": 1688496929.425692}, "source.desafioaethaina.source_dw.address": {"database": "desafiothaina", "schema": "dev_thaina", "name": "address", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.address", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "address"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "address", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Street address information for customers, employees, and vendors.", "columns": {"addressid": {"name": "addressid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`address`", "created_at": 1688496929.435281}, "source.desafioaethaina.source_dw.addresstype": {"database": "desafiothaina", "schema": "dev_thaina", "name": "addresstype", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.addresstype", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "addresstype"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "addresstype", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Types of addresses stored in the Address table.", "columns": {"addresstypeid": {"name": "addresstypeid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`addresstype`", "created_at": 1688496929.452709}, "source.desafioaethaina.source_dw.contacttype": {"database": "desafiothaina", "schema": "dev_thaina", "name": "contacttype", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.contacttype", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "contacttype"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "contacttype", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Lookup table containing the types of business entity contacts.", "columns": {"contacttypeid": {"name": "contacttypeid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`contacttype`", "created_at": 1688496929.4719923}, "source.desafioaethaina.source_dw.countryregion": {"database": "desafiothaina", "schema": "dev_thaina", "name": "countryregion", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.countryregion", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "countryregion"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "countryregion", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Lookup table containing the ISO standard codes for countries and regions.", "columns": {"countryregioncode": {"name": "countryregioncode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`countryregion`", "created_at": 1688496929.4880617}, "source.desafioaethaina.source_dw.businessentityaddress": {"database": "desafiothaina", "schema": "dev_thaina", "name": "businessentityaddress", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.businessentityaddress", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "businessentityaddress"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "businessentityaddress", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Cross-reference table mapping customers, vendors, and employees to their addresses.", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressid": {"name": "addressid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addresstypeid": {"name": "addresstypeid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`businessentityaddress`", "created_at": 1688496929.499305}, "source.desafioaethaina.source_dw.businessentitycontact": {"database": "desafiothaina", "schema": "dev_thaina", "name": "businessentitycontact", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.businessentitycontact", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "businessentitycontact"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "businessentitycontact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Cross-reference table mapping stores, vendors, and employees to people", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personid": {"name": "personid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`businessentitycontact`", "created_at": 1688496929.5111363}, "source.desafioaethaina.source_dw.person": {"database": "desafiothaina", "schema": "dev_thaina", "name": "person", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.person", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "person"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "person", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Human beings involved with AdventureWorks - employees, customer contacts, and vendor contacts.", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "persontype": {"name": "persontype", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`person`", "created_at": 1688496929.5214062}, "source.desafioaethaina.source_dw.stateprovince": {"database": "desafiothaina", "schema": "dev_thaina", "name": "stateprovince", "resource_type": "source", "package_name": "desafioaethaina", "path": "models/silver/person/sources_person.yml", "original_file_path": "models/silver/person/sources_person.yml", "unique_id": "source.desafioaethaina.source_dw.stateprovince", "fqn": ["desafioaethaina", "silver", "person", "source_dw", "stateprovince"], "source_name": "source_dw", "source_description": "Sources from DW with dataset od AdventureWorks", "loader": "", "identifier": "stateprovince", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "State and province lookup table.", "columns": {"stateprovinceid": {"name": "stateprovinceid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stateprovincecode": {"name": "stateprovincecode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "countryregioncode": {"name": "countryregioncode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territoryid": {"name": "territoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafiothaina`.`dev_thaina`.`stateprovince`", "created_at": 1688496929.541336}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5802999, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5810592, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.581781, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5914319, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5924242, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5934625, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5941274, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5966535, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.597305, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.598089, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5984306, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5989552, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5993347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.5998375, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6002958, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.600908, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6018138, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6022437, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6026545, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6036863, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6046422, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.606273, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.60676, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6075647, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6153688, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6170056, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6179695, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.619113, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6222768, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6235251, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6254478, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6325808, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6335478, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6389735, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.639798, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% endif %}\n  {% if is_time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, compiled_code)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.641595, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6431334, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.654881, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6558657, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6565545, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6584868, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6594117, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6598284, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6603317, "supported_languages": null}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6618998, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6630712, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.66516, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6700196, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6726296, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6737368, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6746283, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6757681, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.676353, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6812346, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6852176, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6866167, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6885977, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6905825, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render_wrapped() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6932747, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6939318, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.694232, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6949868, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.695511, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6959417, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6962304, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6966565, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6971486, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6973593, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.697828, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6989715, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.6999583, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7004972, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7013962, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7018902, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.702268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7027078, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7031653, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7045035, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7050972, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7088976, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7093506, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7101595, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7106388, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7114832, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7120478, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7135742, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7142065, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7161255, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7172797, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7176652, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7180333, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7183108, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7187285, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7189333, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.719356, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.719776, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7253933, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.725811, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7264462, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7272933, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7278893, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.728653, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7291355, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7296872, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.730136, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7305465, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7310433, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7317388, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.732342, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7337596, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7343233, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7346866, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.735168, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.736981, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7375653, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7382858, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7388082, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7396212, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7412326, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7423372, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7439885, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.745345, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7462811, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7468176, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7473652, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.750843, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7512078, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7517118, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7520475, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7534606, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.75483, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7556965, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7569633, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.757952, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7590258, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7603958, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7621117, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.766528, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7680423, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.770155, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7718096, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.781559, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7851362, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7859097, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7867215, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7888072, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.794559, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7958314, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7965374, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7974367, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.7986171, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8002737, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8018253, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.804257, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8059373, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8067694, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.80816, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.809303, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8110557, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8137968, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8144298, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8149517, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.815452, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8161387, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8217463, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8228693, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8235698, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8292124, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8301442, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.831412, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8324423, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8335028, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.837587, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8391054, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.841332, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8429596, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8519087, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8551412, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8560057, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8566105, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8579683, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8584824, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8592274, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8597448, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8604164, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8608835, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8613145, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8619957, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8634121, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8769093, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8813968, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8829696, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8868196, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8876104, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.8894405, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.903781, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9139237, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9172592, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.922251, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9246988, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9279547, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9294133, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9311721, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9317877, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.934927, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9373062, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9385612, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9439752, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9451218, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9459324, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9555886, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.956208, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9568655, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.958963, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9595246, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9601533, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9638302, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9698622, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.971369, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9722562, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9793472, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9802125, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9806573, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9809074, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9813304, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9816456, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9822595, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.986397, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.987529, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.988345, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496925.9897065, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.008416, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.017666, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0201385, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0207763, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0220299, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0225503, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0229282, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.023318, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0236406, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.024072, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0243847, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.025621, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0261292, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.02967, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.03926, "supported_languages": ["sql"]}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0468647, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0497336, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0521991, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.058795, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0626035, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.065017, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0658753, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0709352, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.072451, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0739784, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0751965, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0771868, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0785692, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0787907, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0795872, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.08087, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.081666, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.082254, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0855775, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0870047, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0880945, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0891855, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0898917, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0909383, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.091634, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0922685, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0925322, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0935538, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.09427, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0950217, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0954297, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0960782, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0964293, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0971968, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0977068, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0984716, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0988312, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0994284, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.0997205, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.101045, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1024752, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1039643, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1044931, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1056964, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1062508, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1073713, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.107817, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1094573, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1109617, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1118305, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1122355, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1130383, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.113395, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1140244, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.114448, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1150467, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1153185, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.116294, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1171303, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1197681, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1219597, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1237516, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1244595, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.126536, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1276786, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1288476, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1319265, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.132687, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1332083, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1336412, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1341548, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.134878, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1355433, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1365302, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.137641, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1385498, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.139537, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1408935, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1418679, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.144497, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1457508, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1468894, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.147425, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1486392, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1492279, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.150236, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.150859, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1539428, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1556103, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.157911, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1604545, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.165736, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1730378, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1774724, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.182134, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.1931663, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2033484, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2063136, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.209522, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2135859, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2182953, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2218058, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2278502, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2327173, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2354994, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.239079, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2434762, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2473083, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.248615, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.25001, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.251751, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2535934, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2563987, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2593575, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2637346, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.266817, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.274138, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2804291, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.287826, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2919614, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.294985, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.2978613, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.299487, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3004465, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3017433, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3064198, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3081632, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3117359, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3187695, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3213959, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3256638, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.329024, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3337326, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3360815, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3372521, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3392627, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3418276, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3477206, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3593395, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3625433, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3653383, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.367433, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3718848, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.375332, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.379353, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3810198, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3831484, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3855662, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3865604, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3895683, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3930953, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3952706, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3966928, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.3975575, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4058607, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4075558, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4112911, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4129062, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4144564, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4176192, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4264603, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4429457, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4444757, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4451697, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.445706, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4465208, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4506676, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4533806, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4552937, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4590378, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4617538, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4636323, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4647725, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4667764, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.470594, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4721873, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4740534, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4753177, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4766753, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4783268, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.4834383, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.493525, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.497278, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5017488, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5074658, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5173366, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5240197, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5304103, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.532722, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5371027, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5400877, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.544023, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5474122, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5522137, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5540464, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5557244, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5569742, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5578582, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5599465, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.561099, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5622408, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5663166, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.567612, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5688887, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688496926.5743642, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.desafioaethaina.int_product": ["model.desafioaethaina.stg_product", "model.desafioaethaina.stg_product_category", "model.desafioaethaina.stg_product_location", "model.desafioaethaina.stg_product_model", "model.desafioaethaina.stg_product_subcategory"], "model.desafioaethaina.int_address": ["model.desafioaethaina.stg_person_address", "model.desafioaethaina.stg_person_address_type", "model.desafioaethaina.stg_person_business_entity_address", "model.desafioaethaina.stg_person_business_entity_contact", "model.desafioaethaina.stg_person_contact_type", "model.desafioaethaina.stg_person_country_region", "model.desafioaethaina.stg_person_state_province", "model.desafioaethaina.stg_sales_territory"], "model.desafioaethaina.int_person": ["model.desafioaethaina.stg_person_person", "model.desafioaethaina.stg_sales_customer"], "model.desafioaethaina.stg_product_location": ["source.desafioaethaina.source_dw.location"], "model.desafioaethaina.stg_product_subcategory": ["source.desafioaethaina.source_dw.productsubcategory"], "model.desafioaethaina.stg_product_category": ["source.desafioaethaina.source_dw.productcategory"], "model.desafioaethaina.stg_product": ["source.desafioaethaina.source_dw.product"], "model.desafioaethaina.stg_product_model": ["source.desafioaethaina.source_dw.productmodel"], "model.desafioaethaina.stg_purchasing_ship_method": ["source.desafioaethaina.source_dw.shipmethod"], "model.desafioaethaina.stg_sales_order_detail": ["source.desafioaethaina.source_dw.salesorderdetail"], "model.desafioaethaina.stg_sales_territory": ["source.desafioaethaina.source_dw.salesterritory"], "model.desafioaethaina.stg_sales_reason": ["source.desafioaethaina.source_dw.salesreason"], "model.desafioaethaina.stg_sales_customer": ["source.desafioaethaina.source_dw.customer"], "model.desafioaethaina.stg_sales_person": ["source.desafioaethaina.source_dw.salesperson"], "model.desafioaethaina.stg_sales_order_header_reason": ["source.desafioaethaina.source_dw.salesorderheadersalesreason"], "model.desafioaethaina.stg_sales_creditcard": ["source.desafioaethaina.source_dw.creditcard"], "model.desafioaethaina.stg_sales_order_header": ["source.desafioaethaina.source_dw.salesorderheader"], "model.desafioaethaina.stg_person_address_type": ["source.desafioaethaina.source_dw.addresstype"], "model.desafioaethaina.stg_person_state_province": ["source.desafioaethaina.source_dw.stateprovince"], "model.desafioaethaina.stg_person_person": ["source.desafioaethaina.source_dw.person"], "model.desafioaethaina.stg_person_address": ["source.desafioaethaina.source_dw.address"], "model.desafioaethaina.stg_person_contact_type": ["source.desafioaethaina.source_dw.contacttype"], "model.desafioaethaina.stg_person_business_entity_address": ["source.desafioaethaina.source_dw.businessentityaddress"], "model.desafioaethaina.stg_person_country_region": ["source.desafioaethaina.source_dw.countryregion"], "model.desafioaethaina.stg_person_business_entity_contact": ["source.desafioaethaina.source_dw.businessentitycontact"], "seed.desafioaethaina.productmodelproductdescriptionculture": [], "seed.desafioaethaina.location": [], "seed.desafioaethaina.shift": [], "seed.desafioaethaina.productdocument": [], "seed.desafioaethaina.phonenumbertype": [], "seed.desafioaethaina.shipmethod": [], "seed.desafioaethaina.transactionhistoryarchive": [], "seed.desafioaethaina.culture": [], "seed.desafioaethaina.specialoffer": [], "seed.desafioaethaina.productproductphoto": [], "seed.desafioaethaina.employeedepartmenthistory": [], "seed.desafioaethaina.salesorderdetail": [], "seed.desafioaethaina.purchaseorderdetail": [], "seed.desafioaethaina.person": [], "seed.desafioaethaina.businessentitycontact": [], "seed.desafioaethaina.billofmaterials": [], "seed.desafioaethaina.workorder": [], "seed.desafioaethaina.purchaseorderheader": [], "seed.desafioaethaina.productcategory": [], "seed.desafioaethaina.salesterritory": [], "seed.desafioaethaina.illustration": [], "seed.desafioaethaina.product": [], "seed.desafioaethaina.productvendor": [], "seed.desafioaethaina.businessentity": [], "seed.desafioaethaina.address": [], "seed.desafioaethaina.department": [], "seed.desafioaethaina.countryregion": [], "seed.desafioaethaina.emailaddress": [], "seed.desafioaethaina.customer": [], "seed.desafioaethaina.productcosthistory": [], "seed.desafioaethaina.store": [], "seed.desafioaethaina.shoppingcartitem": [], "seed.desafioaethaina.scrapreason": [], "seed.desafioaethaina.specialofferproduct": [], "seed.desafioaethaina.currency": [], "seed.desafioaethaina.productlistpricehistory": [], "seed.desafioaethaina.unitmeasure": [], "seed.desafioaethaina.productinventory": [], "seed.desafioaethaina.salesorderheadersalesreason": [], "seed.desafioaethaina.productmodelillustration": [], "seed.desafioaethaina.personcreditcard": [], "seed.desafioaethaina.productsubcategory": [], "seed.desafioaethaina.productdescription": [], "seed.desafioaethaina.salespersonquotahistory": [], "seed.desafioaethaina.salesterritoryhistory": [], "seed.desafioaethaina.transactionhistory": [], "seed.desafioaethaina.vendor": [], "seed.desafioaethaina.salesperson": [], "seed.desafioaethaina.stateprovince": [], "seed.desafioaethaina.salesreason": [], "seed.desafioaethaina.businessentityaddress": [], "seed.desafioaethaina.addresstype": [], "seed.desafioaethaina.employee": [], "seed.desafioaethaina.productmodel": [], "seed.desafioaethaina.salesorderheader": [], "seed.desafioaethaina.currencyrate": [], "seed.desafioaethaina.contacttype": [], "seed.desafioaethaina.employeepayhistory": [], "seed.desafioaethaina.creditcard": [], "seed.desafioaethaina.salestaxrate": [], "seed.desafioaethaina.jobcandidate": [], "seed.desafioaethaina.workorderrouting": [], "seed.desafioaethaina.personphone": [], "seed.desafioaethaina.countryregioncurrency": [], "test.desafioaethaina.source_not_null_source_dw_product_productid.4acbde7c03": ["source.desafioaethaina.source_dw.product"], "test.desafioaethaina.source_unique_source_dw_product_productid.126b64db49": ["source.desafioaethaina.source_dw.product"], "test.desafioaethaina.source_not_null_source_dw_product_name.833d5e85d5": ["source.desafioaethaina.source_dw.product"], "test.desafioaethaina.source_not_null_source_dw_location_locationid.fa8bc49561": ["source.desafioaethaina.source_dw.location"], "test.desafioaethaina.source_unique_source_dw_location_locationid.be0911bc72": ["source.desafioaethaina.source_dw.location"], "test.desafioaethaina.source_not_null_source_dw_location_name.b27c68526a": ["source.desafioaethaina.source_dw.location"], "test.desafioaethaina.source_unique_source_dw_location_name.e9558cfb13": ["source.desafioaethaina.source_dw.location"], "test.desafioaethaina.source_not_null_source_dw_productcategory_productcategoryid.e93119a70f": ["source.desafioaethaina.source_dw.productcategory"], "test.desafioaethaina.source_unique_source_dw_productcategory_productcategoryid.c475c15972": ["source.desafioaethaina.source_dw.productcategory"], "test.desafioaethaina.source_not_null_source_dw_productcategory_name.1c0280d467": ["source.desafioaethaina.source_dw.productcategory"], "test.desafioaethaina.source_unique_source_dw_productcategory_name.fad8e4b0b1": ["source.desafioaethaina.source_dw.productcategory"], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productsubcategoryid.9e73efd34b": ["source.desafioaethaina.source_dw.productsubcategory"], "test.desafioaethaina.source_unique_source_dw_productsubcategory_productsubcategoryid.079c1171e7": ["source.desafioaethaina.source_dw.productsubcategory"], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productcategoryid.eb82c688f8": ["source.desafioaethaina.source_dw.productsubcategory"], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_name.03b9e42a75": ["source.desafioaethaina.source_dw.productsubcategory"], "test.desafioaethaina.source_not_null_source_dw_productmodel_productmodelid.60f751f4be": ["source.desafioaethaina.source_dw.productmodel"], "test.desafioaethaina.source_unique_source_dw_productmodel_productmodelid.8d9370db49": ["source.desafioaethaina.source_dw.productmodel"], "test.desafioaethaina.source_not_null_source_dw_productmodel_name.ccd6f43041": ["source.desafioaethaina.source_dw.productmodel"], "test.desafioaethaina.source_unique_source_dw_productmodel_name.842abd497c": ["source.desafioaethaina.source_dw.productmodel"], "test.desafioaethaina.source_not_null_source_dw_shipmethod_shipmethodid.90ef3ec559": ["source.desafioaethaina.source_dw.shipmethod"], "test.desafioaethaina.source_unique_source_dw_shipmethod_shipmethodid.52e6a83698": ["source.desafioaethaina.source_dw.shipmethod"], "test.desafioaethaina.source_not_null_source_dw_customer_customerid.d31108f8a7": ["source.desafioaethaina.source_dw.customer"], "test.desafioaethaina.source_unique_source_dw_customer_customerid.ed1cb3ee62": ["source.desafioaethaina.source_dw.customer"], "test.desafioaethaina.source_not_null_source_dw_customer_territoryid.28832b91c4": ["source.desafioaethaina.source_dw.customer"], "test.desafioaethaina.source_not_null_source_dw_salesorderdetail_salesorderdetailid.c81c30b56d": ["source.desafioaethaina.source_dw.salesorderdetail"], "test.desafioaethaina.source_unique_source_dw_salesorderdetail_salesorderdetailid.b5dadbf660": ["source.desafioaethaina.source_dw.salesorderdetail"], "test.desafioaethaina.source_not_null_source_dw_salesorderheader_salesorderid.2c404de264": ["source.desafioaethaina.source_dw.salesorderheader"], "test.desafioaethaina.source_unique_source_dw_salesorderheader_salesorderid.5e09f27a18": ["source.desafioaethaina.source_dw.salesorderheader"], "test.desafioaethaina.source_not_null_source_dw_salesorderheadersalesreason_salesorderid.a0772468dc": ["source.desafioaethaina.source_dw.salesorderheadersalesreason"], "test.desafioaethaina.source_not_null_source_dw_salesperson_businessentityid.3a0ce53fc6": ["source.desafioaethaina.source_dw.salesperson"], "test.desafioaethaina.source_unique_source_dw_salesperson_businessentityid.430dc99789": ["source.desafioaethaina.source_dw.salesperson"], "test.desafioaethaina.source_not_null_source_dw_salesreason_salesreasonid.3cae51d484": ["source.desafioaethaina.source_dw.salesreason"], "test.desafioaethaina.source_unique_source_dw_salesterritory_territoryid.027173e845": ["source.desafioaethaina.source_dw.salesterritory"], "test.desafioaethaina.source_not_null_source_dw_creditcard_creditcardid.3872dc2846": ["source.desafioaethaina.source_dw.creditcard"], "test.desafioaethaina.source_unique_source_dw_creditcard_creditcardid.31a510b993": ["source.desafioaethaina.source_dw.creditcard"], "test.desafioaethaina.source_not_null_source_dw_address_addressid.7a44ee75b0": ["source.desafioaethaina.source_dw.address"], "test.desafioaethaina.source_unique_source_dw_address_addressid.7019473590": ["source.desafioaethaina.source_dw.address"], "test.desafioaethaina.source_not_null_source_dw_addresstype_addresstypeid.564eb03bb4": ["source.desafioaethaina.source_dw.addresstype"], "test.desafioaethaina.source_unique_source_dw_addresstype_addresstypeid.076e9694ad": ["source.desafioaethaina.source_dw.addresstype"], "test.desafioaethaina.source_not_null_source_dw_addresstype_name.13e164d432": ["source.desafioaethaina.source_dw.addresstype"], "test.desafioaethaina.source_unique_source_dw_addresstype_name.49c2b62dc2": ["source.desafioaethaina.source_dw.addresstype"], "test.desafioaethaina.source_not_null_source_dw_contacttype_contacttypeid.58a3a6f69d": ["source.desafioaethaina.source_dw.contacttype"], "test.desafioaethaina.source_unique_source_dw_contacttype_contacttypeid.74f5c55a5d": ["source.desafioaethaina.source_dw.contacttype"], "test.desafioaethaina.source_not_null_source_dw_contacttype_name.d7bcb58766": ["source.desafioaethaina.source_dw.contacttype"], "test.desafioaethaina.source_unique_source_dw_contacttype_name.961d2bbc62": ["source.desafioaethaina.source_dw.contacttype"], "test.desafioaethaina.source_not_null_source_dw_countryregion_countryregioncode.443c601419": ["source.desafioaethaina.source_dw.countryregion"], "test.desafioaethaina.source_unique_source_dw_countryregion_countryregioncode.0f980716dc": ["source.desafioaethaina.source_dw.countryregion"], "test.desafioaethaina.source_not_null_source_dw_countryregion_name.79adbe52d4": ["source.desafioaethaina.source_dw.countryregion"], "test.desafioaethaina.source_unique_source_dw_countryregion_name.d5b57c6b5e": ["source.desafioaethaina.source_dw.countryregion"], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_businessentityid.5f8910090e": ["source.desafioaethaina.source_dw.businessentityaddress"], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addressid.8cec201a33": ["source.desafioaethaina.source_dw.businessentityaddress"], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addresstypeid.73a0833a49": ["source.desafioaethaina.source_dw.businessentityaddress"], "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_businessentityid.75c9140add": ["source.desafioaethaina.source_dw.businessentitycontact"], "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_personid.c5b632a6a6": ["source.desafioaethaina.source_dw.businessentitycontact"], "test.desafioaethaina.source_unique_source_dw_businessentitycontact_personid.8dd5bb14a3": ["source.desafioaethaina.source_dw.businessentitycontact"], "test.desafioaethaina.source_not_null_source_dw_person_businessentityid.3289b8551c": ["source.desafioaethaina.source_dw.person"], "test.desafioaethaina.source_unique_source_dw_person_businessentityid.ab2004ab7d": ["source.desafioaethaina.source_dw.person"], "test.desafioaethaina.source_not_null_source_dw_person_persontype.fd87678f00": ["source.desafioaethaina.source_dw.person"], "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovinceid.8473ad24cc": ["source.desafioaethaina.source_dw.stateprovince"], "test.desafioaethaina.source_unique_source_dw_stateprovince_stateprovinceid.c2a006dfc5": ["source.desafioaethaina.source_dw.stateprovince"], "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovincecode.b985f26ece": ["source.desafioaethaina.source_dw.stateprovince"], "test.desafioaethaina.source_not_null_source_dw_stateprovince_countryregioncode.99c1deafae": ["source.desafioaethaina.source_dw.stateprovince"], "test.desafioaethaina.source_not_null_source_dw_stateprovince_name.cbba3b6969": ["source.desafioaethaina.source_dw.stateprovince"], "test.desafioaethaina.source_not_null_source_dw_stateprovince_territoryid.d2dd290fe7": ["source.desafioaethaina.source_dw.stateprovince"], "model.desafioaethaina.dim_dates": [], "model.desafioaethaina.dim_products": ["model.desafioaethaina.int_product", "model.desafioaethaina.int_product"], "model.desafioaethaina.dim_customers": ["model.desafioaethaina.int_person", "model.desafioaethaina.int_person"], "model.desafioaethaina.dim_address": ["model.desafioaethaina.int_address", "model.desafioaethaina.int_address"], "model.desafioaethaina.dim_territories": ["model.desafioaethaina.int_address", "model.desafioaethaina.int_address"], "model.desafioaethaina.dim_reasons": ["model.desafioaethaina.int_reason", "model.desafioaethaina.int_reason"], "model.desafioaethaina.int_sales": ["model.desafioaethaina.int_reason", "model.desafioaethaina.stg_sales_creditcard", "model.desafioaethaina.stg_sales_order_detail", "model.desafioaethaina.stg_sales_order_header", "model.desafioaethaina.stg_sales_order_header_reason"], "model.desafioaethaina.dim_cards_type": ["model.desafioaethaina.int_sales", "model.desafioaethaina.int_sales"], "model.desafioaethaina.int_reason": ["model.desafioaethaina.stg_sales_order_header_reason", "model.desafioaethaina.stg_sales_reason"], "model.desafioaethaina.fact_sales": ["model.desafioaethaina.int_sales"], "test.desafioaethaina.not_null_fact_sales_sale_identifier_sk.f1e7cc502e": ["model.desafioaethaina.fact_sales"], "test.desafioaethaina.unique_fact_sales_sale_identifier_sk.28d5892d06": ["model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686": ["model.desafioaethaina.dim_customers", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b": ["model.desafioaethaina.dim_territories", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de": ["model.desafioaethaina.dim_address", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310": ["model.desafioaethaina.dim_address", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207": ["model.desafioaethaina.dim_products", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659": ["model.desafioaethaina.dim_cards_type", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f": ["model.desafioaethaina.dim_reasons", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f": ["model.desafioaethaina.dim_dates", "model.desafioaethaina.fact_sales"], "test.desafioaethaina.not_null_dim_territories_territory_sk.63a10e9994": ["model.desafioaethaina.dim_territories"], "test.desafioaethaina.unique_dim_territories_territory_sk.c33c73c3d3": ["model.desafioaethaina.dim_territories"], "test.desafioaethaina.not_null_dim_address_address_sk.6b4bcead40": ["model.desafioaethaina.dim_address"], "test.desafioaethaina.unique_dim_address_address_sk.d3ee9ce728": ["model.desafioaethaina.dim_address"], "test.desafioaethaina.not_null_dim_address_business_entity_id.1b9faed002": ["model.desafioaethaina.dim_address"], "test.desafioaethaina.not_null_dim_address_address_type_id.5adabc5e26": ["model.desafioaethaina.dim_address"], "test.desafioaethaina.not_null_dim_address_address_type_name.c30bd4a13b": ["model.desafioaethaina.dim_address"], "test.desafioaethaina.not_null_dim_cards_type_credit_card_sk.44ff8f59e0": ["model.desafioaethaina.dim_cards_type"], "test.desafioaethaina.unique_dim_cards_type_credit_card_sk.2715e2829d": ["model.desafioaethaina.dim_cards_type"], "test.desafioaethaina.not_null_dim_reasons_reason_type_sk.cefab8368d": ["model.desafioaethaina.dim_reasons"], "test.desafioaethaina.unique_dim_reasons_reason_type_sk.3d6112e120": ["model.desafioaethaina.dim_reasons"], "test.desafioaethaina.not_null_dim_customers_customer_sk.8ae5836863": ["model.desafioaethaina.dim_customers"], "test.desafioaethaina.unique_dim_customers_customer_sk.22a014df62": ["model.desafioaethaina.dim_customers"], "test.desafioaethaina.not_null_dim_products_product_sk.2a2df3e1b9": ["model.desafioaethaina.dim_products"], "test.desafioaethaina.unique_dim_products_product_sk.8f20ac7c5b": ["model.desafioaethaina.dim_products"], "test.desafioaethaina.check_2011_sales": ["model.desafioaethaina.fact_sales"], "source.desafioaethaina.source_dw.product": [], "source.desafioaethaina.source_dw.location": [], "source.desafioaethaina.source_dw.productcategory": [], "source.desafioaethaina.source_dw.productsubcategory": [], "source.desafioaethaina.source_dw.productmodel": [], "source.desafioaethaina.source_dw.shipmethod": [], "source.desafioaethaina.source_dw.customer": [], "source.desafioaethaina.source_dw.salesorderdetail": [], "source.desafioaethaina.source_dw.salesorderheader": [], "source.desafioaethaina.source_dw.salesorderheadersalesreason": [], "source.desafioaethaina.source_dw.salesperson": [], "source.desafioaethaina.source_dw.salesreason": [], "source.desafioaethaina.source_dw.salesterritory": [], "source.desafioaethaina.source_dw.creditcard": [], "source.desafioaethaina.source_dw.address": [], "source.desafioaethaina.source_dw.addresstype": [], "source.desafioaethaina.source_dw.contacttype": [], "source.desafioaethaina.source_dw.countryregion": [], "source.desafioaethaina.source_dw.businessentityaddress": [], "source.desafioaethaina.source_dw.businessentitycontact": [], "source.desafioaethaina.source_dw.person": [], "source.desafioaethaina.source_dw.stateprovince": []}, "child_map": {"model.desafioaethaina.int_product": ["model.desafioaethaina.dim_products", "model.desafioaethaina.dim_products"], "model.desafioaethaina.int_address": ["model.desafioaethaina.dim_address", "model.desafioaethaina.dim_address", "model.desafioaethaina.dim_territories", "model.desafioaethaina.dim_territories"], "model.desafioaethaina.int_person": ["model.desafioaethaina.dim_customers", "model.desafioaethaina.dim_customers"], "model.desafioaethaina.stg_product_location": ["model.desafioaethaina.int_product"], "model.desafioaethaina.stg_product_subcategory": ["model.desafioaethaina.int_product"], "model.desafioaethaina.stg_product_category": ["model.desafioaethaina.int_product"], "model.desafioaethaina.stg_product": ["model.desafioaethaina.int_product"], "model.desafioaethaina.stg_product_model": ["model.desafioaethaina.int_product"], "model.desafioaethaina.stg_purchasing_ship_method": [], "model.desafioaethaina.stg_sales_order_detail": ["model.desafioaethaina.int_sales"], "model.desafioaethaina.stg_sales_territory": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_sales_reason": ["model.desafioaethaina.int_reason"], "model.desafioaethaina.stg_sales_customer": ["model.desafioaethaina.int_person"], "model.desafioaethaina.stg_sales_person": [], "model.desafioaethaina.stg_sales_order_header_reason": ["model.desafioaethaina.int_reason", "model.desafioaethaina.int_sales"], "model.desafioaethaina.stg_sales_creditcard": ["model.desafioaethaina.int_sales"], "model.desafioaethaina.stg_sales_order_header": ["model.desafioaethaina.int_sales"], "model.desafioaethaina.stg_person_address_type": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_state_province": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_person": ["model.desafioaethaina.int_person"], "model.desafioaethaina.stg_person_address": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_contact_type": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_business_entity_address": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_country_region": ["model.desafioaethaina.int_address"], "model.desafioaethaina.stg_person_business_entity_contact": ["model.desafioaethaina.int_address"], "seed.desafioaethaina.productmodelproductdescriptionculture": [], "seed.desafioaethaina.location": [], "seed.desafioaethaina.shift": [], "seed.desafioaethaina.productdocument": [], "seed.desafioaethaina.phonenumbertype": [], "seed.desafioaethaina.shipmethod": [], "seed.desafioaethaina.transactionhistoryarchive": [], "seed.desafioaethaina.culture": [], "seed.desafioaethaina.specialoffer": [], "seed.desafioaethaina.productproductphoto": [], "seed.desafioaethaina.employeedepartmenthistory": [], "seed.desafioaethaina.salesorderdetail": [], "seed.desafioaethaina.purchaseorderdetail": [], "seed.desafioaethaina.person": [], "seed.desafioaethaina.businessentitycontact": [], "seed.desafioaethaina.billofmaterials": [], "seed.desafioaethaina.workorder": [], "seed.desafioaethaina.purchaseorderheader": [], "seed.desafioaethaina.productcategory": [], "seed.desafioaethaina.salesterritory": [], "seed.desafioaethaina.illustration": [], "seed.desafioaethaina.product": [], "seed.desafioaethaina.productvendor": [], "seed.desafioaethaina.businessentity": [], "seed.desafioaethaina.address": [], "seed.desafioaethaina.department": [], "seed.desafioaethaina.countryregion": [], "seed.desafioaethaina.emailaddress": [], "seed.desafioaethaina.customer": [], "seed.desafioaethaina.productcosthistory": [], "seed.desafioaethaina.store": [], "seed.desafioaethaina.shoppingcartitem": [], "seed.desafioaethaina.scrapreason": [], "seed.desafioaethaina.specialofferproduct": [], "seed.desafioaethaina.currency": [], "seed.desafioaethaina.productlistpricehistory": [], "seed.desafioaethaina.unitmeasure": [], "seed.desafioaethaina.productinventory": [], "seed.desafioaethaina.salesorderheadersalesreason": [], "seed.desafioaethaina.productmodelillustration": [], "seed.desafioaethaina.personcreditcard": [], "seed.desafioaethaina.productsubcategory": [], "seed.desafioaethaina.productdescription": [], "seed.desafioaethaina.salespersonquotahistory": [], "seed.desafioaethaina.salesterritoryhistory": [], "seed.desafioaethaina.transactionhistory": [], "seed.desafioaethaina.vendor": [], "seed.desafioaethaina.salesperson": [], "seed.desafioaethaina.stateprovince": [], "seed.desafioaethaina.salesreason": [], "seed.desafioaethaina.businessentityaddress": [], "seed.desafioaethaina.addresstype": [], "seed.desafioaethaina.employee": [], "seed.desafioaethaina.productmodel": [], "seed.desafioaethaina.salesorderheader": [], "seed.desafioaethaina.currencyrate": [], "seed.desafioaethaina.contacttype": [], "seed.desafioaethaina.employeepayhistory": [], "seed.desafioaethaina.creditcard": [], "seed.desafioaethaina.salestaxrate": [], "seed.desafioaethaina.jobcandidate": [], "seed.desafioaethaina.workorderrouting": [], "seed.desafioaethaina.personphone": [], "seed.desafioaethaina.countryregioncurrency": [], "test.desafioaethaina.source_not_null_source_dw_product_productid.4acbde7c03": [], "test.desafioaethaina.source_unique_source_dw_product_productid.126b64db49": [], "test.desafioaethaina.source_not_null_source_dw_product_name.833d5e85d5": [], "test.desafioaethaina.source_not_null_source_dw_location_locationid.fa8bc49561": [], "test.desafioaethaina.source_unique_source_dw_location_locationid.be0911bc72": [], "test.desafioaethaina.source_not_null_source_dw_location_name.b27c68526a": [], "test.desafioaethaina.source_unique_source_dw_location_name.e9558cfb13": [], "test.desafioaethaina.source_not_null_source_dw_productcategory_productcategoryid.e93119a70f": [], "test.desafioaethaina.source_unique_source_dw_productcategory_productcategoryid.c475c15972": [], "test.desafioaethaina.source_not_null_source_dw_productcategory_name.1c0280d467": [], "test.desafioaethaina.source_unique_source_dw_productcategory_name.fad8e4b0b1": [], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productsubcategoryid.9e73efd34b": [], "test.desafioaethaina.source_unique_source_dw_productsubcategory_productsubcategoryid.079c1171e7": [], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productcategoryid.eb82c688f8": [], "test.desafioaethaina.source_not_null_source_dw_productsubcategory_name.03b9e42a75": [], "test.desafioaethaina.source_not_null_source_dw_productmodel_productmodelid.60f751f4be": [], "test.desafioaethaina.source_unique_source_dw_productmodel_productmodelid.8d9370db49": [], "test.desafioaethaina.source_not_null_source_dw_productmodel_name.ccd6f43041": [], "test.desafioaethaina.source_unique_source_dw_productmodel_name.842abd497c": [], "test.desafioaethaina.source_not_null_source_dw_shipmethod_shipmethodid.90ef3ec559": [], "test.desafioaethaina.source_unique_source_dw_shipmethod_shipmethodid.52e6a83698": [], "test.desafioaethaina.source_not_null_source_dw_customer_customerid.d31108f8a7": [], "test.desafioaethaina.source_unique_source_dw_customer_customerid.ed1cb3ee62": [], "test.desafioaethaina.source_not_null_source_dw_customer_territoryid.28832b91c4": [], "test.desafioaethaina.source_not_null_source_dw_salesorderdetail_salesorderdetailid.c81c30b56d": [], "test.desafioaethaina.source_unique_source_dw_salesorderdetail_salesorderdetailid.b5dadbf660": [], "test.desafioaethaina.source_not_null_source_dw_salesorderheader_salesorderid.2c404de264": [], "test.desafioaethaina.source_unique_source_dw_salesorderheader_salesorderid.5e09f27a18": [], "test.desafioaethaina.source_not_null_source_dw_salesorderheadersalesreason_salesorderid.a0772468dc": [], "test.desafioaethaina.source_not_null_source_dw_salesperson_businessentityid.3a0ce53fc6": [], "test.desafioaethaina.source_unique_source_dw_salesperson_businessentityid.430dc99789": [], "test.desafioaethaina.source_not_null_source_dw_salesreason_salesreasonid.3cae51d484": [], "test.desafioaethaina.source_unique_source_dw_salesterritory_territoryid.027173e845": [], "test.desafioaethaina.source_not_null_source_dw_creditcard_creditcardid.3872dc2846": [], "test.desafioaethaina.source_unique_source_dw_creditcard_creditcardid.31a510b993": [], "test.desafioaethaina.source_not_null_source_dw_address_addressid.7a44ee75b0": [], "test.desafioaethaina.source_unique_source_dw_address_addressid.7019473590": [], "test.desafioaethaina.source_not_null_source_dw_addresstype_addresstypeid.564eb03bb4": [], "test.desafioaethaina.source_unique_source_dw_addresstype_addresstypeid.076e9694ad": [], "test.desafioaethaina.source_not_null_source_dw_addresstype_name.13e164d432": [], "test.desafioaethaina.source_unique_source_dw_addresstype_name.49c2b62dc2": [], "test.desafioaethaina.source_not_null_source_dw_contacttype_contacttypeid.58a3a6f69d": [], "test.desafioaethaina.source_unique_source_dw_contacttype_contacttypeid.74f5c55a5d": [], "test.desafioaethaina.source_not_null_source_dw_contacttype_name.d7bcb58766": [], "test.desafioaethaina.source_unique_source_dw_contacttype_name.961d2bbc62": [], "test.desafioaethaina.source_not_null_source_dw_countryregion_countryregioncode.443c601419": [], "test.desafioaethaina.source_unique_source_dw_countryregion_countryregioncode.0f980716dc": [], "test.desafioaethaina.source_not_null_source_dw_countryregion_name.79adbe52d4": [], "test.desafioaethaina.source_unique_source_dw_countryregion_name.d5b57c6b5e": [], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_businessentityid.5f8910090e": [], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addressid.8cec201a33": [], "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addresstypeid.73a0833a49": [], "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_businessentityid.75c9140add": [], "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_personid.c5b632a6a6": [], "test.desafioaethaina.source_unique_source_dw_businessentitycontact_personid.8dd5bb14a3": [], "test.desafioaethaina.source_not_null_source_dw_person_businessentityid.3289b8551c": [], "test.desafioaethaina.source_unique_source_dw_person_businessentityid.ab2004ab7d": [], "test.desafioaethaina.source_not_null_source_dw_person_persontype.fd87678f00": [], "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovinceid.8473ad24cc": [], "test.desafioaethaina.source_unique_source_dw_stateprovince_stateprovinceid.c2a006dfc5": [], "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovincecode.b985f26ece": [], "test.desafioaethaina.source_not_null_source_dw_stateprovince_countryregioncode.99c1deafae": [], "test.desafioaethaina.source_not_null_source_dw_stateprovince_name.cbba3b6969": [], "test.desafioaethaina.source_not_null_source_dw_stateprovince_territoryid.d2dd290fe7": [], "model.desafioaethaina.dim_dates": ["test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5", "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390", "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f"], "model.desafioaethaina.dim_products": ["test.desafioaethaina.not_null_dim_products_product_sk.2a2df3e1b9", "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207", "test.desafioaethaina.unique_dim_products_product_sk.8f20ac7c5b"], "model.desafioaethaina.dim_customers": ["test.desafioaethaina.not_null_dim_customers_customer_sk.8ae5836863", "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686", "test.desafioaethaina.unique_dim_customers_customer_sk.22a014df62"], "model.desafioaethaina.dim_address": ["test.desafioaethaina.not_null_dim_address_address_sk.6b4bcead40", "test.desafioaethaina.not_null_dim_address_address_type_id.5adabc5e26", "test.desafioaethaina.not_null_dim_address_address_type_name.c30bd4a13b", "test.desafioaethaina.not_null_dim_address_business_entity_id.1b9faed002", "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de", "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310", "test.desafioaethaina.unique_dim_address_address_sk.d3ee9ce728"], "model.desafioaethaina.dim_territories": ["test.desafioaethaina.not_null_dim_territories_territory_sk.63a10e9994", "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b", "test.desafioaethaina.unique_dim_territories_territory_sk.c33c73c3d3"], "model.desafioaethaina.dim_reasons": ["test.desafioaethaina.not_null_dim_reasons_reason_type_sk.cefab8368d", "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f", "test.desafioaethaina.unique_dim_reasons_reason_type_sk.3d6112e120"], "model.desafioaethaina.int_sales": ["model.desafioaethaina.dim_cards_type", "model.desafioaethaina.dim_cards_type", "model.desafioaethaina.fact_sales"], "model.desafioaethaina.dim_cards_type": ["test.desafioaethaina.not_null_dim_cards_type_credit_card_sk.44ff8f59e0", "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659", "test.desafioaethaina.unique_dim_cards_type_credit_card_sk.2715e2829d"], "model.desafioaethaina.int_reason": ["model.desafioaethaina.dim_reasons", "model.desafioaethaina.dim_reasons", "model.desafioaethaina.int_sales"], "model.desafioaethaina.fact_sales": ["test.desafioaethaina.check_2011_sales", "test.desafioaethaina.not_null_fact_sales_sale_identifier_sk.f1e7cc502e", "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de", "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659", "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686", "test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5", "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390", "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207", "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f", "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f", "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310", "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b", "test.desafioaethaina.unique_fact_sales_sale_identifier_sk.28d5892d06"], "test.desafioaethaina.not_null_fact_sales_sale_identifier_sk.f1e7cc502e": [], "test.desafioaethaina.unique_fact_sales_sale_identifier_sk.28d5892d06": [], "test.desafioaethaina.relationships_fact_sales_customer_fk__customer_sk__ref_dim_customers_.5e0177c686": [], "test.desafioaethaina.relationships_fact_sales_territory_fk__territory_sk__ref_dim_territories_.485b30953b": [], "test.desafioaethaina.relationships_fact_sales_bill_to_address_fk__address_sk__ref_dim_address_.a62dc426de": [], "test.desafioaethaina.relationships_fact_sales_ship_to_address_fk__address_sk__ref_dim_address_.7fc1c84310": [], "test.desafioaethaina.relationships_fact_sales_product_fk__product_sk__ref_dim_products_.dc3cec8207": [], "test.desafioaethaina.relationships_fact_sales_credit_card_fk__credit_card_sk__ref_dim_cards_type_.3fdb6a1659": [], "test.desafioaethaina.relationships_fact_sales_reason_type_fk__reason_type_sk__ref_dim_reasons_.f866b42f3f": [], "test.desafioaethaina.relationships_fact_sales_order_date__metric_date__ref_dim_dates_.e5ad051390": [], "test.desafioaethaina.relationships_fact_sales_due_date__metric_date__ref_dim_dates_.cf4a314ca5": [], "test.desafioaethaina.relationships_fact_sales_ship_date__metric_date__ref_dim_dates_.2c60279b9f": [], "test.desafioaethaina.not_null_dim_territories_territory_sk.63a10e9994": [], "test.desafioaethaina.unique_dim_territories_territory_sk.c33c73c3d3": [], "test.desafioaethaina.not_null_dim_address_address_sk.6b4bcead40": [], "test.desafioaethaina.unique_dim_address_address_sk.d3ee9ce728": [], "test.desafioaethaina.not_null_dim_address_business_entity_id.1b9faed002": [], "test.desafioaethaina.not_null_dim_address_address_type_id.5adabc5e26": [], "test.desafioaethaina.not_null_dim_address_address_type_name.c30bd4a13b": [], "test.desafioaethaina.not_null_dim_cards_type_credit_card_sk.44ff8f59e0": [], "test.desafioaethaina.unique_dim_cards_type_credit_card_sk.2715e2829d": [], "test.desafioaethaina.not_null_dim_reasons_reason_type_sk.cefab8368d": [], "test.desafioaethaina.unique_dim_reasons_reason_type_sk.3d6112e120": [], "test.desafioaethaina.not_null_dim_customers_customer_sk.8ae5836863": [], "test.desafioaethaina.unique_dim_customers_customer_sk.22a014df62": [], "test.desafioaethaina.not_null_dim_products_product_sk.2a2df3e1b9": [], "test.desafioaethaina.unique_dim_products_product_sk.8f20ac7c5b": [], "test.desafioaethaina.check_2011_sales": [], "source.desafioaethaina.source_dw.product": ["model.desafioaethaina.stg_product", "test.desafioaethaina.source_not_null_source_dw_product_name.833d5e85d5", "test.desafioaethaina.source_not_null_source_dw_product_productid.4acbde7c03", "test.desafioaethaina.source_unique_source_dw_product_productid.126b64db49"], "source.desafioaethaina.source_dw.location": ["model.desafioaethaina.stg_product_location", "test.desafioaethaina.source_not_null_source_dw_location_locationid.fa8bc49561", "test.desafioaethaina.source_not_null_source_dw_location_name.b27c68526a", "test.desafioaethaina.source_unique_source_dw_location_locationid.be0911bc72", "test.desafioaethaina.source_unique_source_dw_location_name.e9558cfb13"], "source.desafioaethaina.source_dw.productcategory": ["model.desafioaethaina.stg_product_category", "test.desafioaethaina.source_not_null_source_dw_productcategory_name.1c0280d467", "test.desafioaethaina.source_not_null_source_dw_productcategory_productcategoryid.e93119a70f", "test.desafioaethaina.source_unique_source_dw_productcategory_name.fad8e4b0b1", "test.desafioaethaina.source_unique_source_dw_productcategory_productcategoryid.c475c15972"], "source.desafioaethaina.source_dw.productsubcategory": ["model.desafioaethaina.stg_product_subcategory", "test.desafioaethaina.source_not_null_source_dw_productsubcategory_name.03b9e42a75", "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productcategoryid.eb82c688f8", "test.desafioaethaina.source_not_null_source_dw_productsubcategory_productsubcategoryid.9e73efd34b", "test.desafioaethaina.source_unique_source_dw_productsubcategory_productsubcategoryid.079c1171e7"], "source.desafioaethaina.source_dw.productmodel": ["model.desafioaethaina.stg_product_model", "test.desafioaethaina.source_not_null_source_dw_productmodel_name.ccd6f43041", "test.desafioaethaina.source_not_null_source_dw_productmodel_productmodelid.60f751f4be", "test.desafioaethaina.source_unique_source_dw_productmodel_name.842abd497c", "test.desafioaethaina.source_unique_source_dw_productmodel_productmodelid.8d9370db49"], "source.desafioaethaina.source_dw.shipmethod": ["model.desafioaethaina.stg_purchasing_ship_method", "test.desafioaethaina.source_not_null_source_dw_shipmethod_shipmethodid.90ef3ec559", "test.desafioaethaina.source_unique_source_dw_shipmethod_shipmethodid.52e6a83698"], "source.desafioaethaina.source_dw.customer": ["model.desafioaethaina.stg_sales_customer", "test.desafioaethaina.source_not_null_source_dw_customer_customerid.d31108f8a7", "test.desafioaethaina.source_not_null_source_dw_customer_territoryid.28832b91c4", "test.desafioaethaina.source_unique_source_dw_customer_customerid.ed1cb3ee62"], "source.desafioaethaina.source_dw.salesorderdetail": ["model.desafioaethaina.stg_sales_order_detail", "test.desafioaethaina.source_not_null_source_dw_salesorderdetail_salesorderdetailid.c81c30b56d", "test.desafioaethaina.source_unique_source_dw_salesorderdetail_salesorderdetailid.b5dadbf660"], "source.desafioaethaina.source_dw.salesorderheader": ["model.desafioaethaina.stg_sales_order_header", "test.desafioaethaina.source_not_null_source_dw_salesorderheader_salesorderid.2c404de264", "test.desafioaethaina.source_unique_source_dw_salesorderheader_salesorderid.5e09f27a18"], "source.desafioaethaina.source_dw.salesorderheadersalesreason": ["model.desafioaethaina.stg_sales_order_header_reason", "test.desafioaethaina.source_not_null_source_dw_salesorderheadersalesreason_salesorderid.a0772468dc"], "source.desafioaethaina.source_dw.salesperson": ["model.desafioaethaina.stg_sales_person", "test.desafioaethaina.source_not_null_source_dw_salesperson_businessentityid.3a0ce53fc6", "test.desafioaethaina.source_unique_source_dw_salesperson_businessentityid.430dc99789"], "source.desafioaethaina.source_dw.salesreason": ["model.desafioaethaina.stg_sales_reason", "test.desafioaethaina.source_not_null_source_dw_salesreason_salesreasonid.3cae51d484"], "source.desafioaethaina.source_dw.salesterritory": ["model.desafioaethaina.stg_sales_territory", "test.desafioaethaina.source_unique_source_dw_salesterritory_territoryid.027173e845"], "source.desafioaethaina.source_dw.creditcard": ["model.desafioaethaina.stg_sales_creditcard", "test.desafioaethaina.source_not_null_source_dw_creditcard_creditcardid.3872dc2846", "test.desafioaethaina.source_unique_source_dw_creditcard_creditcardid.31a510b993"], "source.desafioaethaina.source_dw.address": ["model.desafioaethaina.stg_person_address", "test.desafioaethaina.source_not_null_source_dw_address_addressid.7a44ee75b0", "test.desafioaethaina.source_unique_source_dw_address_addressid.7019473590"], "source.desafioaethaina.source_dw.addresstype": ["model.desafioaethaina.stg_person_address_type", "test.desafioaethaina.source_not_null_source_dw_addresstype_addresstypeid.564eb03bb4", "test.desafioaethaina.source_not_null_source_dw_addresstype_name.13e164d432", "test.desafioaethaina.source_unique_source_dw_addresstype_addresstypeid.076e9694ad", "test.desafioaethaina.source_unique_source_dw_addresstype_name.49c2b62dc2"], "source.desafioaethaina.source_dw.contacttype": ["model.desafioaethaina.stg_person_contact_type", "test.desafioaethaina.source_not_null_source_dw_contacttype_contacttypeid.58a3a6f69d", "test.desafioaethaina.source_not_null_source_dw_contacttype_name.d7bcb58766", "test.desafioaethaina.source_unique_source_dw_contacttype_contacttypeid.74f5c55a5d", "test.desafioaethaina.source_unique_source_dw_contacttype_name.961d2bbc62"], "source.desafioaethaina.source_dw.countryregion": ["model.desafioaethaina.stg_person_country_region", "test.desafioaethaina.source_not_null_source_dw_countryregion_countryregioncode.443c601419", "test.desafioaethaina.source_not_null_source_dw_countryregion_name.79adbe52d4", "test.desafioaethaina.source_unique_source_dw_countryregion_countryregioncode.0f980716dc", "test.desafioaethaina.source_unique_source_dw_countryregion_name.d5b57c6b5e"], "source.desafioaethaina.source_dw.businessentityaddress": ["model.desafioaethaina.stg_person_business_entity_address", "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addressid.8cec201a33", "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_addresstypeid.73a0833a49", "test.desafioaethaina.source_not_null_source_dw_businessentityaddress_businessentityid.5f8910090e"], "source.desafioaethaina.source_dw.businessentitycontact": ["model.desafioaethaina.stg_person_business_entity_contact", "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_businessentityid.75c9140add", "test.desafioaethaina.source_not_null_source_dw_businessentitycontact_personid.c5b632a6a6", "test.desafioaethaina.source_unique_source_dw_businessentitycontact_personid.8dd5bb14a3"], "source.desafioaethaina.source_dw.person": ["model.desafioaethaina.stg_person_person", "test.desafioaethaina.source_not_null_source_dw_person_businessentityid.3289b8551c", "test.desafioaethaina.source_not_null_source_dw_person_persontype.fd87678f00", "test.desafioaethaina.source_unique_source_dw_person_businessentityid.ab2004ab7d"], "source.desafioaethaina.source_dw.stateprovince": ["model.desafioaethaina.stg_person_state_province", "test.desafioaethaina.source_not_null_source_dw_stateprovince_countryregioncode.99c1deafae", "test.desafioaethaina.source_not_null_source_dw_stateprovince_name.cbba3b6969", "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovincecode.b985f26ece", "test.desafioaethaina.source_not_null_source_dw_stateprovince_stateprovinceid.8473ad24cc", "test.desafioaethaina.source_not_null_source_dw_stateprovince_territoryid.d2dd290fe7", "test.desafioaethaina.source_unique_source_dw_stateprovince_stateprovinceid.c2a006dfc5"]}}